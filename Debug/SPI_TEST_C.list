
SPI_TEST_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e74  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800604c  0800604c  0000704c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800608c  0800608c  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  0800608c  0800608c  0000708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006094  08006094  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006094  08006094  00007094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006098  08006098  00007098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800609c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  2000000c  080060a8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  080060a8  000085f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f569  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040ab  00000000  00000000  000275a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b88  00000000  00000000  0002b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001541  00000000  00000000  0002d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e70  00000000  00000000  0002e719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022694  00000000  00000000  00051589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3daa  00000000  00000000  00073c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001579c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007610  00000000  00000000  00157a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015f01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006034 	.word	0x08006034

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006034 	.word	0x08006034

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f005 fd5a 	bl	8005fda <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800052e:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000530:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4817      	ldr	r0, [pc, #92]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000592:	f001 f8f3 	bl	800177c <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800059c:	f000 fa72 	bl	8000a84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005ac:	f001 fe80 	bl	80022b0 <HAL_ADCEx_MultiModeConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b6:	f000 fa65 	bl	8000a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2306      	movs	r3, #6
 80005c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c6:	237f      	movs	r3, #127	@ 0x7f
 80005c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005d8:	f001 fa54 	bl	8001a84 <HAL_ADC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005e2:	f000 fa4f 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	3730      	adds	r7, #48	@ 0x30
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	0c900008 	.word	0x0c900008

080005f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09a      	sub	sp, #104	@ 0x68
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	2244      	movs	r2, #68	@ 0x44
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f005 fcde 	bl	8005fda <memset>
  if(adcHandle->Instance==ADC1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000626:	d134      	bne.n	8000692 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800062c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800062e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fab5 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000644:	f000 fa1e 	bl	8000a84 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a13      	ldr	r2, [pc, #76]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VSENS_Pin;
 8000678:	2304      	movs	r3, #4
 800067a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067c:	2303      	movs	r3, #3
 800067e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(VSENS_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000688:	4619      	mov	r1, r3
 800068a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068e:	f002 f947 	bl	8002920 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3768      	adds	r7, #104	@ 0x68
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000

080006a0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006a6:	4a20      	ldr	r2, [pc, #128]	@ (8000728 <MX_FDCAN1_Init+0x88>)
 80006a8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006bc:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006be:	2200      	movs	r2, #0
 80006c0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006c2:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006c8:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006d0:	2210      	movs	r2, #16
 80006d2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006d4:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006dc:	2202      	movs	r2, #2
 80006de:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80006e0:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 8000700:	2200      	movs	r2, #0
 8000702:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 8000706:	2200      	movs	r2, #0
 8000708:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 800070c:	2200      	movs	r2, #0
 800070e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_FDCAN1_Init+0x84>)
 8000712:	f001 ff55 	bl	80025c0 <HAL_FDCAN_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800071c:	f000 f9b2 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000094 	.word	0x20000094
 8000728:	40006400 	.word	0x40006400

0800072c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b09a      	sub	sp, #104	@ 0x68
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	2244      	movs	r2, #68	@ 0x44
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f005 fc44 	bl	8005fda <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a20      	ldr	r2, [pc, #128]	@ (80007d8 <HAL_FDCAN_MspInit+0xac>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d138      	bne.n	80007ce <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800075c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000760:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000766:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4618      	mov	r0, r3
 800076e:	f003 fa1b 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000778:	f000 f984 	bl	8000a84 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <HAL_FDCAN_MspInit+0xb0>)
 800077e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000780:	4a16      	ldr	r2, [pc, #88]	@ (80007dc <HAL_FDCAN_MspInit+0xb0>)
 8000782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000786:	6593      	str	r3, [r2, #88]	@ 0x58
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <HAL_FDCAN_MspInit+0xb0>)
 800078a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800078c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <HAL_FDCAN_MspInit+0xb0>)
 8000796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000798:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <HAL_FDCAN_MspInit+0xb0>)
 800079a:	f043 0302 	orr.w	r3, r3, #2
 800079e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <HAL_FDCAN_MspInit+0xb0>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80007be:	2309      	movs	r3, #9
 80007c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <HAL_FDCAN_MspInit+0xb4>)
 80007ca:	f002 f8a9 	bl	8002920 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80007ce:	bf00      	nop
 80007d0:	3768      	adds	r7, #104	@ 0x68
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40006400 	.word	0x40006400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000400 	.word	0x48000400

080007e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fa:	4b58      	ldr	r3, [pc, #352]	@ (800095c <MX_GPIO_Init+0x178>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a57      	ldr	r2, [pc, #348]	@ (800095c <MX_GPIO_Init+0x178>)
 8000800:	f043 0320 	orr.w	r3, r3, #32
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b55      	ldr	r3, [pc, #340]	@ (800095c <MX_GPIO_Init+0x178>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0320 	and.w	r3, r3, #32
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	4b52      	ldr	r3, [pc, #328]	@ (800095c <MX_GPIO_Init+0x178>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a51      	ldr	r2, [pc, #324]	@ (800095c <MX_GPIO_Init+0x178>)
 8000818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b4f      	ldr	r3, [pc, #316]	@ (800095c <MX_GPIO_Init+0x178>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b4c      	ldr	r3, [pc, #304]	@ (800095c <MX_GPIO_Init+0x178>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a4b      	ldr	r2, [pc, #300]	@ (800095c <MX_GPIO_Init+0x178>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b49      	ldr	r3, [pc, #292]	@ (800095c <MX_GPIO_Init+0x178>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b46      	ldr	r3, [pc, #280]	@ (800095c <MX_GPIO_Init+0x178>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	4a45      	ldr	r2, [pc, #276]	@ (800095c <MX_GPIO_Init+0x178>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084e:	4b43      	ldr	r3, [pc, #268]	@ (800095c <MX_GPIO_Init+0x178>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b40      	ldr	r3, [pc, #256]	@ (800095c <MX_GPIO_Init+0x178>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	4a3f      	ldr	r2, [pc, #252]	@ (800095c <MX_GPIO_Init+0x178>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000866:	4b3d      	ldr	r3, [pc, #244]	@ (800095c <MX_GPIO_Init+0x178>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2110      	movs	r1, #16
 8000876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087a:	f002 f9d3 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC_CS_GPIO_Port, ENC_CS_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2110      	movs	r1, #16
 8000882:	4837      	ldr	r0, [pc, #220]	@ (8000960 <MX_GPIO_Init+0x17c>)
 8000884:	f002 f9ce 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_RST_GPIO_Port, DRV_RST_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2104      	movs	r1, #4
 800088c:	4835      	ldr	r0, [pc, #212]	@ (8000964 <MX_GPIO_Init+0x180>)
 800088e:	f002 f9c9 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CTRL_5V_Pin|GRN_Pin|RED_Pin|BLU_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000898:	4832      	ldr	r0, [pc, #200]	@ (8000964 <MX_GPIO_Init+0x180>)
 800089a:	f002 f9c3 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTRL_CS_Pin|CAN_SD_Pin|CAN_IO_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a8:	f002 f9bc 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 80008ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4829      	ldr	r0, [pc, #164]	@ (8000968 <MX_GPIO_Init+0x184>)
 80008c2:	f002 f82d 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin|CTRL_CS_Pin|CAN_SD_Pin|CAN_IO_Pin;
 80008c6:	f44f 63e2 	mov.w	r3, #1808	@ 0x710
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e2:	f002 f81d 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CS_Pin;
 80008e6:	2310      	movs	r3, #16
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENC_CS_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4818      	ldr	r0, [pc, #96]	@ (8000960 <MX_GPIO_Init+0x17c>)
 80008fe:	f002 f80f 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DRV_ERR_Pin|SW2_Pin;
 8000902:	2382      	movs	r3, #130	@ 0x82
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4813      	ldr	r0, [pc, #76]	@ (8000964 <MX_GPIO_Init+0x180>)
 8000916:	f002 f803 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DRV_RST_Pin|CTRL_5V_Pin|GRN_Pin|RED_Pin
 800091a:	f24f 0304 	movw	r3, #61444	@ 0xf004
 800091e:	617b      	str	r3, [r7, #20]
                          |BLU_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_GPIO_Init+0x180>)
 8000934:	f001 fff4 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000938:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000950:	f001 ffe6 	bl	8002920 <HAL_GPIO_Init>

}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	@ 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	48000800 	.word	0x48000800
 8000964:	48000400 	.word	0x48000400
 8000968:	48001800 	.word	0x48001800

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000972:	f000 fc9a 	bl	80012aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f000 f839 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f7ff ff33 	bl	80007e4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800097e:	f7ff fe8f 	bl	80006a0 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8000982:	f000 fb67 	bl	8001054 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000986:	f000 fc0b 	bl	80011a0 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800098a:	f000 fa77 	bl	8000e7c <MX_TIM2_Init>
  MX_SPI1_Init();
 800098e:	f000 f91f 	bl	8000bd0 <MX_SPI1_Init>
  MX_OPAMP1_Init();
 8000992:	f000 f87d 	bl	8000a90 <MX_OPAMP1_Init>
  MX_SPI3_Init();
 8000996:	f000 f959 	bl	8000c4c <MX_SPI3_Init>
  MX_ADC1_Init();
 800099a:	f7ff fdb5 	bl	8000508 <MX_ADC1_Init>
  MX_OPAMP2_Init();
 800099e:	f000 f89d 	bl	8000adc <MX_OPAMP2_Init>
  /* USER CODE BEGIN 2 */
#define TLE5012B_READ_ANGLE_CMD 0x8020 // Command to read angle value


    uint8_t cmd[2] = {TLE5012B_READ_ANGLE_CMD >> 8, TLE5012B_READ_ANGLE_CMD & 0xFF};
 80009a2:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 80009a6:	80bb      	strh	r3, [r7, #4]

    /* USER CODE BEGIN 3 */


    // Pull CS pin low to start transmission
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2110      	movs	r1, #16
 80009ac:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <main+0x78>)
 80009ae:	f002 f939 	bl	8002c24 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, cmd, recv, 4, HAL_MAX_DELAY);
 80009b2:	463a      	mov	r2, r7
 80009b4:	1d39      	adds	r1, r7, #4
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2304      	movs	r3, #4
 80009be:	480a      	ldr	r0, [pc, #40]	@ (80009e8 <main+0x7c>)
 80009c0:	f003 fb8d 	bl	80040de <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2110      	movs	r1, #16
 80009c8:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <main+0x78>)
 80009ca:	f002 f92b 	bl	8002c24 <HAL_GPIO_WritePin>
    angle = recv[0]*256+recv[1];
 80009ce:	783b      	ldrb	r3, [r7, #0]
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	787a      	ldrb	r2, [r7, #1]
 80009d6:	4413      	add	r3, r2
 80009d8:	80fb      	strh	r3, [r7, #6]



//  uint16_t angle = TLE5012B_ReadAngle();
//  printf("Angle: %.2d degrees\n", angle);
  HAL_Delay(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f000 fcd6 	bl	800138c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80009e0:	bf00      	nop
 80009e2:	e7e1      	b.n	80009a8 <main+0x3c>
 80009e4:	48000800 	.word	0x48000800
 80009e8:	20000170 	.word	0x20000170

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	@ 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	2238      	movs	r2, #56	@ 0x38
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f005 faed 	bl	8005fda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a12:	f002 fae7 	bl	8002fe4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2340      	movs	r3, #64	@ 0x40
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000a30:	230c      	movs	r3, #12
 8000a32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0318 	add.w	r3, r7, #24
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 fb81 	bl	800314c <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a50:	f000 f818 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fe7f 	bl	8003770 <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a78:	f000 f804 	bl	8000a84 <Error_Handler>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3750      	adds	r7, #80	@ 0x50
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp1;
OPAMP_HandleTypeDef hopamp2;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_OPAMP1_Init+0x44>)
 8000a96:	4a10      	ldr	r2, [pc, #64]	@ (8000ad8 <MX_OPAMP1_Init+0x48>)
 8000a98:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_OPAMP1_Init+0x44>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_OPAMP1_Init+0x44>)
 8000aa2:	2260      	movs	r2, #96	@ 0x60
 8000aa4:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_OPAMP1_Init+0x44>)
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_OPAMP1_Init+0x44>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_OPAMP1_Init+0x44>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_OPAMP1_Init+0x44>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_OPAMP1_Init+0x44>)
 8000ac0:	f002 f8c8 	bl	8002c54 <HAL_OPAMP_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000aca:	f7ff ffdb 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000f8 	.word	0x200000f8
 8000ad8:	40010300 	.word	0x40010300

08000adc <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_OPAMP2_Init+0x44>)
 8000ae2:	4a10      	ldr	r2, [pc, #64]	@ (8000b24 <MX_OPAMP2_Init+0x48>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_OPAMP2_Init+0x44>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_OPAMP2_Init+0x44>)
 8000aee:	2260      	movs	r2, #96	@ 0x60
 8000af0:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <MX_OPAMP2_Init+0x44>)
 8000af4:	2208      	movs	r2, #8
 8000af6:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8000af8:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_OPAMP2_Init+0x44>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <MX_OPAMP2_Init+0x44>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_OPAMP2_Init+0x44>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_OPAMP2_Init+0x44>)
 8000b0c:	f002 f8a2 	bl	8002c54 <HAL_OPAMP_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 8000b16:	f7ff ffb5 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000134 	.word	0x20000134
 8000b24:	40010304 	.word	0x40010304

08000b28 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <HAL_OPAMP_MspInit+0x98>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d119      	bne.n	8000b7e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <HAL_OPAMP_MspInit+0x9c>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc4 <HAL_OPAMP_MspInit+0x9c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b56:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <HAL_OPAMP_MspInit+0x9c>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA3     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = IA_OPAMP_Pin;
 8000b62:	2308      	movs	r3, #8
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b66:	2303      	movs	r3, #3
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IA_OPAMP_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f001 fed2 	bl	8002920 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
}
 8000b7c:	e01c      	b.n	8000bb8 <HAL_OPAMP_MspInit+0x90>
  else if(opampHandle->Instance==OPAMP2)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a11      	ldr	r2, [pc, #68]	@ (8000bc8 <HAL_OPAMP_MspInit+0xa0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d117      	bne.n	8000bb8 <HAL_OPAMP_MspInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_OPAMP_MspInit+0x9c>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <HAL_OPAMP_MspInit+0x9c>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b94:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_OPAMP_MspInit+0x9c>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b98:	f003 0302 	and.w	r3, r3, #2
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IB_OPAMP_Pin;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IB_OPAMP_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <HAL_OPAMP_MspInit+0xa4>)
 8000bb4:	f001 feb4 	bl	8002920 <HAL_GPIO_Init>
}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40010300 	.word	0x40010300
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010304 	.word	0x40010304
 8000bcc:	48000400 	.word	0x48000400

08000bd0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <MX_SPI1_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c1e:	2207      	movs	r2, #7
 8000c20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c30:	f003 f9aa 	bl	8003f88 <HAL_SPI_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f7ff ff23 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000170 	.word	0x20000170
 8000c48:	40013000 	.word	0x40013000

08000c4c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c52:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc4 <MX_SPI3_Init+0x78>)
 8000c54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c64:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c66:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c6a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c7e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_SPI3_Init+0x74>)
 8000cac:	f003 f96c 	bl	8003f88 <HAL_SPI_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cb6:	f7ff fee5 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200001d4 	.word	0x200001d4
 8000cc4:	40003c00 	.word	0x40003c00

08000cc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	@ 0x30
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8000da0 <HAL_SPI_MspInit+0xd8>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d129      	bne.n	8000d3e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cea:	4b2e      	ldr	r3, [pc, #184]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cee:	4a2d      	ldr	r2, [pc, #180]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000cf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cfe:	61bb      	str	r3, [r7, #24]
 8000d00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b28      	ldr	r3, [pc, #160]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	4a27      	ldr	r2, [pc, #156]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0e:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ENC_SCK_Pin|ENC_MISO_Pin|ENC_MOSI_Pin;
 8000d1a:	23e0      	movs	r3, #224	@ 0xe0
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d38:	f001 fdf2 	bl	8002920 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d3c:	e02c      	b.n	8000d98 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a19      	ldr	r2, [pc, #100]	@ (8000da8 <HAL_SPI_MspInit+0xe0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d127      	bne.n	8000d98 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4c:	4a15      	ldr	r2, [pc, #84]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d64:	4a0f      	ldr	r2, [pc, #60]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <HAL_SPI_MspInit+0xdc>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CTRL_SCK_Pin|CTRL_MISO_Pin|CTRL_MOSI_Pin;
 8000d78:	2338      	movs	r3, #56	@ 0x38
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d88:	2306      	movs	r3, #6
 8000d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	@ (8000dac <HAL_SPI_MspInit+0xe4>)
 8000d94:	f001 fdc4 	bl	8002920 <HAL_GPIO_Init>
}
 8000d98:	bf00      	nop
 8000d9a:	3730      	adds	r7, #48	@ 0x30
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40013000 	.word	0x40013000
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40003c00 	.word	0x40003c00
 8000dac:	48000400 	.word	0x48000400

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <HAL_MspInit+0x44>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dba:	4a0e      	ldr	r2, [pc, #56]	@ (8000df4 <HAL_MspInit+0x44>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <HAL_MspInit+0x44>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <HAL_MspInit+0x44>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd2:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <HAL_MspInit+0x44>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_MspInit+0x44>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000de6:	f002 f9a1 	bl	800312c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <NMI_Handler+0x4>

08000e00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <MemManage_Handler+0x4>

08000e10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4e:	f000 fa7f 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	615a      	str	r2, [r3, #20]
 8000e9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea0:	4b32      	ldr	r3, [pc, #200]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000ea2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ea6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ea8:	4b30      	ldr	r3, [pc, #192]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000eae:	4b2f      	ldr	r3, [pc, #188]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 511;
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000eb6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000eba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ec8:	4828      	ldr	r0, [pc, #160]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000eca:	f003 fc8f 	bl	80047ec <HAL_TIM_PWM_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ed4:	f7ff fdd6 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4821      	ldr	r0, [pc, #132]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000ee8:	f004 f97e 	bl	80051e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ef2:	f7ff fdc7 	bl	8000a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef6:	2360      	movs	r3, #96	@ 0x60
 8000ef8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4817      	ldr	r0, [pc, #92]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000f0e:	f003 fcc5 	bl	800489c <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f18:	f7ff fdb4 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2204      	movs	r2, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	4812      	ldr	r0, [pc, #72]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000f24:	f003 fcba 	bl	800489c <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000f2e:	f7ff fda9 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	2208      	movs	r2, #8
 8000f36:	4619      	mov	r1, r3
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000f3a:	f003 fcaf 	bl	800489c <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000f44:	f7ff fd9e 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000f50:	f003 fca4 	bl	800489c <HAL_TIM_PWM_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000f5a:	f7ff fd93 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f5e:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <MX_TIM2_Init+0xf0>)
 8000f60:	f000 f824 	bl	8000fac <HAL_TIM_MspPostInit>

}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	@ 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000238 	.word	0x20000238

08000f70 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f80:	d10b      	bne.n	8000f9a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <HAL_TIM_PWM_MspInit+0x38>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f86:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <HAL_TIM_PWM_MspInit+0x38>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_TIM_PWM_MspInit+0x38>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fcc:	d139      	bne.n	8001042 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <HAL_TIM_MspPostInit+0xa0>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800104c <HAL_TIM_MspPostInit+0xa0>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HAL_TIM_MspPostInit+0xa0>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <HAL_TIM_MspPostInit+0xa0>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	4a18      	ldr	r2, [pc, #96]	@ (800104c <HAL_TIM_MspPostInit+0xa0>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff2:	4b16      	ldr	r3, [pc, #88]	@ (800104c <HAL_TIM_MspPostInit+0xa0>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = DRV_CH1_Pin|DRV_CH2_Pin;
 8000ffe:	2303      	movs	r3, #3
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800100e:	2301      	movs	r3, #1
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101c:	f001 fc80 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRV_CH4_Pin|DRV_CH3_Pin;
 8001020:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001032:	2301      	movs	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4804      	ldr	r0, [pc, #16]	@ (8001050 <HAL_TIM_MspPostInit+0xa4>)
 800103e:	f001 fc6f 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	@ 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000
 8001050:	48000400 	.word	0x48000400

08001054 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 800105a:	4a23      	ldr	r2, [pc, #140]	@ (80010e8 <MX_USART3_UART_Init+0x94>)
 800105c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800105e:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800109c:	4811      	ldr	r0, [pc, #68]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 800109e:	f004 f925 	bl	80052ec <HAL_UART_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010a8:	f7ff fcec 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ac:	2100      	movs	r1, #0
 80010ae:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 80010b0:	f004 fe90 	bl	8005dd4 <HAL_UARTEx_SetTxFifoThreshold>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ba:	f7ff fce3 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 80010c2:	f004 fec5 	bl	8005e50 <HAL_UARTEx_SetRxFifoThreshold>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010cc:	f7ff fcda 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_USART3_UART_Init+0x90>)
 80010d2:	f004 fe46 	bl	8005d62 <HAL_UARTEx_DisableFifoMode>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010dc:	f7ff fcd2 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000284 	.word	0x20000284
 80010e8:	40004800 	.word	0x40004800

080010ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b09a      	sub	sp, #104	@ 0x68
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	2244      	movs	r2, #68	@ 0x44
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f004 ff64 	bl	8005fda <memset>
  if(uartHandle->Instance==USART3)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1f      	ldr	r2, [pc, #124]	@ (8001194 <HAL_UART_MspInit+0xa8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d136      	bne.n	800118a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800111c:	2304      	movs	r3, #4
 800111e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fd3d 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001134:	f7ff fca6 	bl	8000a84 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_UART_MspInit+0xac>)
 800113a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113c:	4a16      	ldr	r2, [pc, #88]	@ (8001198 <HAL_UART_MspInit+0xac>)
 800113e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001142:	6593      	str	r3, [r2, #88]	@ 0x58
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <HAL_UART_MspInit+0xac>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_UART_MspInit+0xac>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	4a10      	ldr	r2, [pc, #64]	@ (8001198 <HAL_UART_MspInit+0xac>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <HAL_UART_MspInit+0xac>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = EXP_TX_Pin|EXP_RX_Pin;
 8001168:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800116c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800117a:	2307      	movs	r3, #7
 800117c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <HAL_UART_MspInit+0xb0>)
 8001186:	f001 fbcb 	bl	8002920 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	3768      	adds	r7, #104	@ 0x68
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40004800 	.word	0x40004800
 8001198:	40021000 	.word	0x40021000
 800119c:	48000800 	.word	0x48000800

080011a0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80011a4:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <MX_USB_PCD_Init+0x48>)
 80011a6:	4a11      	ldr	r2, [pc, #68]	@ (80011ec <MX_USB_PCD_Init+0x4c>)
 80011a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <MX_USB_PCD_Init+0x48>)
 80011ac:	2208      	movs	r2, #8
 80011ae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <MX_USB_PCD_Init+0x48>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_USB_PCD_Init+0x48>)
 80011b8:	2202      	movs	r2, #2
 80011ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <MX_USB_PCD_Init+0x48>)
 80011be:	2200      	movs	r2, #0
 80011c0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_USB_PCD_Init+0x48>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <MX_USB_PCD_Init+0x48>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_USB_PCD_Init+0x48>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_USB_PCD_Init+0x48>)
 80011d6:	f001 fe0d 	bl	8002df4 <HAL_PCD_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80011e0:	f7ff fc50 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000318 	.word	0x20000318
 80011ec:	40005c00 	.word	0x40005c00

080011f0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	@ 0x50
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2244      	movs	r2, #68	@ 0x44
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f004 feea 	bl	8005fda <memset>
  if(pcdHandle->Instance==USB)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a11      	ldr	r2, [pc, #68]	@ (8001250 <HAL_PCD_MspInit+0x60>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d11b      	bne.n	8001248 <HAL_PCD_MspInit+0x58>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001210:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001214:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001216:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800121a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4618      	mov	r0, r3
 8001222:	f002 fcc1 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800122c:	f7ff fc2a 	bl	8000a84 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001230:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <HAL_PCD_MspInit+0x64>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001234:	4a07      	ldr	r2, [pc, #28]	@ (8001254 <HAL_PCD_MspInit+0x64>)
 8001236:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800123a:	6593      	str	r3, [r2, #88]	@ 0x58
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_PCD_MspInit+0x64>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001248:	bf00      	nop
 800124a:	3750      	adds	r7, #80	@ 0x50
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40005c00 	.word	0x40005c00
 8001254:	40021000 	.word	0x40021000

08001258 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001258:	480d      	ldr	r0, [pc, #52]	@ (8001290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800125a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800125c:	f7ff fdfc 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <LoopForever+0x6>)
  ldr r1, =_edata
 8001262:	490d      	ldr	r1, [pc, #52]	@ (8001298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <LoopForever+0xe>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001278:	4c0a      	ldr	r4, [pc, #40]	@ (80012a4 <LoopForever+0x16>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f004 feb1 	bl	8005fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800128a:	f7ff fb6f 	bl	800096c <main>

0800128e <LoopForever>:

LoopForever:
    b LoopForever
 800128e:	e7fe      	b.n	800128e <LoopForever>
  ldr   r0, =_estack
 8001290:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800129c:	0800609c 	.word	0x0800609c
  ldr r2, =_sbss
 80012a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012a4:	200005f8 	.word	0x200005f8

080012a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC1_2_IRQHandler>

080012aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f001 f951 	bl	800255c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f80e 	bl	80012dc <HAL_InitTick>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	e001      	b.n	80012d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012cc:	f7ff fd70 	bl	8000db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d0:	79fb      	ldrb	r3, [r7, #7]

}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012e8:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <HAL_InitTick+0x68>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d022      	beq.n	8001336 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012f0:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <HAL_InitTick+0x6c>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <HAL_InitTick+0x68>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001300:	fbb2 f3f3 	udiv	r3, r2, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f001 f94e 	bl	80025a6 <HAL_SYSTICK_Config>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10f      	bne.n	8001330 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b0f      	cmp	r3, #15
 8001314:	d809      	bhi.n	800132a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001316:	2200      	movs	r2, #0
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	f04f 30ff 	mov.w	r0, #4294967295
 800131e:	f001 f928 	bl	8002572 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001322:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <HAL_InitTick+0x70>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e007      	b.n	800133a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e004      	b.n	800133a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e001      	b.n	800133a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000008 	.word	0x20000008
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b05      	ldr	r3, [pc, #20]	@ (800136c <HAL_IncTick+0x1c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_IncTick+0x20>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4413      	add	r3, r2
 800135e:	4a03      	ldr	r2, [pc, #12]	@ (800136c <HAL_IncTick+0x1c>)
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	200005f4 	.word	0x200005f4
 8001370:	20000008 	.word	0x20000008

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	200005f4 	.word	0x200005f4

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d004      	beq.n	80013b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_Delay+0x40>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b0:	bf00      	nop
 80013b2:	f7ff ffdf 	bl	8001374 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d8f7      	bhi.n	80013b2 <HAL_Delay+0x26>
  {
  }
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000008 	.word	0x20000008

080013d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	609a      	str	r2, [r3, #8]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	609a      	str	r2, [r3, #8]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3360      	adds	r3, #96	@ 0x60
 800144a:	461a      	mov	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <LL_ADC_SetOffset+0x44>)
 800145a:	4013      	ands	r3, r2
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	4313      	orrs	r3, r2
 8001468:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001470:	bf00      	nop
 8001472:	371c      	adds	r7, #28
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	03fff000 	.word	0x03fff000

08001480 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3360      	adds	r3, #96	@ 0x60
 800148e:	461a      	mov	r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3360      	adds	r3, #96	@ 0x60
 80014bc:	461a      	mov	r2, r3
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014d6:	bf00      	nop
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b087      	sub	sp, #28
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3360      	adds	r3, #96	@ 0x60
 80014f2:	461a      	mov	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	431a      	orrs	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800150c:	bf00      	nop
 800150e:	371c      	adds	r7, #28
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3360      	adds	r3, #96	@ 0x60
 8001528:	461a      	mov	r2, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001542:	bf00      	nop
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	615a      	str	r2, [r3, #20]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3330      	adds	r3, #48	@ 0x30
 8001584:	461a      	mov	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	4413      	add	r3, r2
 8001592:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	211f      	movs	r1, #31
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	401a      	ands	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	0e9b      	lsrs	r3, r3, #26
 80015ac:	f003 011f 	and.w	r1, r3, #31
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	431a      	orrs	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015c0:	bf00      	nop
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3314      	adds	r3, #20
 80015dc:	461a      	mov	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	0e5b      	lsrs	r3, r3, #25
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	0d1b      	lsrs	r3, r3, #20
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	2107      	movs	r1, #7
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	401a      	ands	r2, r3
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	0d1b      	lsrs	r3, r3, #20
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163c:	43db      	mvns	r3, r3
 800163e:	401a      	ands	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0318 	and.w	r3, r3, #24
 8001646:	4908      	ldr	r1, [pc, #32]	@ (8001668 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001648:	40d9      	lsrs	r1, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	400b      	ands	r3, r1
 800164e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001652:	431a      	orrs	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	0007ffff 	.word	0x0007ffff

0800166c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800167c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6093      	str	r3, [r2, #8]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016a4:	d101      	bne.n	80016aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80016c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016f4:	d101      	bne.n	80016fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <LL_ADC_IsEnabled+0x18>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <LL_ADC_IsEnabled+0x1a>
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b04      	cmp	r3, #4
 8001740:	d101      	bne.n	8001746 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b08      	cmp	r3, #8
 8001766:	d101      	bne.n	800176c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b089      	sub	sp, #36	@ 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e167      	b.n	8001a66 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d109      	bne.n	80017b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7fe ff27 	bl	80005f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff67 	bl	8001690 <LL_ADC_IsDeepPowerDownEnabled>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff4d 	bl	800166c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff82 	bl	80016e0 <LL_ADC_IsInternalRegulatorEnabled>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d115      	bne.n	800180e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff66 	bl	80016b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017ec:	4ba0      	ldr	r3, [pc, #640]	@ (8001a70 <HAL_ADC_Init+0x2f4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	4aa0      	ldr	r2, [pc, #640]	@ (8001a74 <HAL_ADC_Init+0x2f8>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	3301      	adds	r3, #1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001800:	e002      	b.n	8001808 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3b01      	subs	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f9      	bne.n	8001802 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff64 	bl	80016e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001822:	f043 0210 	orr.w	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff75 	bl	800172e <LL_ADC_REG_IsConversionOngoing>
 8001844:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 8100 	bne.w	8001a54 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 80fc 	bne.w	8001a54 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001860:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001864:	f043 0202 	orr.w	r2, r3, #2
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff49 	bl	8001708 <LL_ADC_IsEnabled>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d111      	bne.n	80018a0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800187c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001880:	f7ff ff42 	bl	8001708 <LL_ADC_IsEnabled>
 8001884:	4604      	mov	r4, r0
 8001886:	487c      	ldr	r0, [pc, #496]	@ (8001a78 <HAL_ADC_Init+0x2fc>)
 8001888:	f7ff ff3e 	bl	8001708 <LL_ADC_IsEnabled>
 800188c:	4603      	mov	r3, r0
 800188e:	4323      	orrs	r3, r4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4619      	mov	r1, r3
 800189a:	4878      	ldr	r0, [pc, #480]	@ (8001a7c <HAL_ADC_Init+0x300>)
 800189c:	f7ff fd98 	bl	80013d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7f5b      	ldrb	r3, [r3, #29]
 80018a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80018b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80018b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d106      	bne.n	80018dc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d2:	3b01      	subs	r3, #1
 80018d4:	045b      	lsls	r3, r3, #17
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b60      	ldr	r3, [pc, #384]	@ (8001a80 <HAL_ADC_Init+0x304>)
 8001900:	4013      	ands	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	430b      	orrs	r3, r1
 800190a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff14 	bl	8001754 <LL_ADC_INJ_IsConversionOngoing>
 800192c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d16d      	bne.n	8001a10 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d16a      	bne.n	8001a10 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800193e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001946:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001956:	f023 0302 	bic.w	r3, r3, #2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	430b      	orrs	r3, r1
 8001962:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d017      	beq.n	800199c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800197a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001984:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001988:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6911      	ldr	r1, [r2, #16]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	430b      	orrs	r3, r1
 8001996:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800199a:	e013      	b.n	80019c4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80019aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019c0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d118      	bne.n	8001a00 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019ea:	4311      	orrs	r1, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019f0:	430a      	orrs	r2, r1
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	e007      	b.n	8001a10 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d10c      	bne.n	8001a32 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f023 010f 	bic.w	r1, r3, #15
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	1e5a      	subs	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a30:	e007      	b.n	8001a42 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 020f 	bic.w	r2, r2, #15
 8001a40:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a46:	f023 0303 	bic.w	r3, r3, #3
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a52:	e007      	b.n	8001a64 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a58:	f043 0210 	orr.w	r2, r3, #16
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3724      	adds	r7, #36	@ 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd90      	pop	{r4, r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000000 	.word	0x20000000
 8001a74:	053e2d63 	.word	0x053e2d63
 8001a78:	50000100 	.word	0x50000100
 8001a7c:	50000300 	.word	0x50000300
 8001a80:	fff04007 	.word	0xfff04007

08001a84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0b6      	sub	sp, #216	@ 0xd8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x22>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e3c8      	b.n	8002238 <HAL_ADC_ConfigChannel+0x7b4>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fe3b 	bl	800172e <LL_ADC_REG_IsConversionOngoing>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 83ad 	bne.w	800221a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	f7ff fd51 	bl	8001574 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fe29 	bl	800172e <LL_ADC_REG_IsConversionOngoing>
 8001adc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fe35 	bl	8001754 <LL_ADC_INJ_IsConversionOngoing>
 8001aea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 81d9 	bne.w	8001eaa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001af8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f040 81d4 	bne.w	8001eaa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b0a:	d10f      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7ff fd58 	bl	80015cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fd12 	bl	800154e <LL_ADC_SetSamplingTimeCommonConfig>
 8001b2a:	e00e      	b.n	8001b4a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6819      	ldr	r1, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f7ff fd47 	bl	80015cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fd02 	bl	800154e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	08db      	lsrs	r3, r3, #3
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d022      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6919      	ldr	r1, [r3, #16]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b7c:	f7ff fc5c 	bl	8001438 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6919      	ldr	r1, [r3, #16]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f7ff fca8 	bl	80014e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d102      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x124>
 8001ba2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ba6:	e000      	b.n	8001baa <HAL_ADC_ConfigChannel+0x126>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	461a      	mov	r2, r3
 8001bac:	f7ff fcb4 	bl	8001518 <LL_ADC_SetOffsetSaturation>
 8001bb0:	e17b      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fc61 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10a      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x15a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fc56 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	0e9b      	lsrs	r3, r3, #26
 8001bd8:	f003 021f 	and.w	r2, r3, #31
 8001bdc:	e01e      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x198>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fc4b 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	e004      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1b0>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0e9b      	lsrs	r3, r3, #26
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	e018      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1e2>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001c50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	e004      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d106      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fc1a 	bl	80014ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fbfe 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10a      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x220>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2101      	movs	r1, #1
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fbf3 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	0e9b      	lsrs	r3, r3, #26
 8001c9e:	f003 021f 	and.w	r2, r3, #31
 8001ca2:	e01e      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x25e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fbe8 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001cca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	e004      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d105      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x276>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	e018      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x2a8>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	e004      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001d22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d106      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2200      	movs	r2, #0
 8001d36:	2101      	movs	r1, #1
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fbb7 	bl	80014ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2102      	movs	r1, #2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fb9b 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10a      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x2e6>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2102      	movs	r1, #2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fb90 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	0e9b      	lsrs	r3, r3, #26
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	e01e      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x324>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2102      	movs	r1, #2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fb85 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001d90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	e004      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001d9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x33c>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0e9b      	lsrs	r3, r3, #26
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	e016      	b.n	8001dee <HAL_ADC_ConfigChannel+0x36a>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001dd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001de0:	2320      	movs	r3, #32
 8001de2:	e004      	b.n	8001dee <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d106      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fb56 	bl	80014ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2103      	movs	r1, #3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fb3a 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10a      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x3a8>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fb2f 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	0e9b      	lsrs	r3, r3, #26
 8001e26:	f003 021f 	and.w	r2, r3, #31
 8001e2a:	e017      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x3d8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2103      	movs	r1, #3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fb24 	bl	8001480 <LL_ADC_GetOffsetChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e46:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	e003      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001e52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x3f0>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0e9b      	lsrs	r3, r3, #26
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	e011      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x414>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001e82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	e003      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d106      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2103      	movs	r1, #3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fb01 	bl	80014ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fc2a 	bl	8001708 <LL_ADC_IsEnabled>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 8140 	bne.w	800213c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f7ff fbab 	bl	8001624 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4a8f      	ldr	r2, [pc, #572]	@ (8002110 <HAL_ADC_ConfigChannel+0x68c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	f040 8131 	bne.w	800213c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10b      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x47e>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e9b      	lsrs	r3, r3, #26
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	2b09      	cmp	r3, #9
 8001ef8:	bf94      	ite	ls
 8001efa:	2301      	movls	r3, #1
 8001efc:	2300      	movhi	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	e019      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x4b2>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f12:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001f1a:	2320      	movs	r3, #32
 8001f1c:	e003      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	bf94      	ite	ls
 8001f30:	2301      	movls	r3, #1
 8001f32:	2300      	movhi	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d079      	beq.n	800202e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d107      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x4d2>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0e9b      	lsrs	r3, r3, #26
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	069b      	lsls	r3, r3, #26
 8001f50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f54:	e015      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x4fe>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f66:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	e003      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	069b      	lsls	r3, r3, #26
 8001f7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x51e>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	0e9b      	lsrs	r3, r3, #26
 8001f94:	3301      	adds	r3, #1
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	e017      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x54e>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001fba:	2320      	movs	r3, #32
 8001fbc:	e003      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2101      	movs	r1, #1
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	ea42 0103 	orr.w	r1, r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x574>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	0e9b      	lsrs	r3, r3, #26
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f003 021f 	and.w	r2, r3, #31
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	051b      	lsls	r3, r3, #20
 8001ff6:	e018      	b.n	800202a <HAL_ADC_ConfigChannel+0x5a6>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002008:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800200a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002010:	2320      	movs	r3, #32
 8002012:	e003      	b.n	800201c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	f003 021f 	and.w	r2, r3, #31
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800202a:	430b      	orrs	r3, r1
 800202c:	e081      	b.n	8002132 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002036:	2b00      	cmp	r3, #0
 8002038:	d107      	bne.n	800204a <HAL_ADC_ConfigChannel+0x5c6>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	3301      	adds	r3, #1
 8002042:	069b      	lsls	r3, r3, #26
 8002044:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002048:	e015      	b.n	8002076 <HAL_ADC_ConfigChannel+0x5f2>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800205c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002062:	2320      	movs	r3, #32
 8002064:	e003      	b.n	800206e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	3301      	adds	r3, #1
 8002070:	069b      	lsls	r3, r3, #26
 8002072:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x612>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0e9b      	lsrs	r3, r3, #26
 8002088:	3301      	adds	r3, #1
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	2101      	movs	r1, #1
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	e017      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x642>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	61fb      	str	r3, [r7, #28]
  return result;
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80020ae:	2320      	movs	r3, #32
 80020b0:	e003      	b.n	80020ba <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	ea42 0103 	orr.w	r1, r2, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10d      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x66e>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0e9b      	lsrs	r3, r3, #26
 80020dc:	3301      	adds	r3, #1
 80020de:	f003 021f 	and.w	r2, r3, #31
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	3b1e      	subs	r3, #30
 80020ea:	051b      	lsls	r3, r3, #20
 80020ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020f0:	e01e      	b.n	8002130 <HAL_ADC_ConfigChannel+0x6ac>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	613b      	str	r3, [r7, #16]
  return result;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d104      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800210a:	2320      	movs	r3, #32
 800210c:	e006      	b.n	800211c <HAL_ADC_ConfigChannel+0x698>
 800210e:	bf00      	nop
 8002110:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3301      	adds	r3, #1
 800211e:	f003 021f 	and.w	r2, r3, #31
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	3b1e      	subs	r3, #30
 800212a:	051b      	lsls	r3, r3, #20
 800212c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002130:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002136:	4619      	mov	r1, r3
 8002138:	f7ff fa48 	bl	80015cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b3f      	ldr	r3, [pc, #252]	@ (8002240 <HAL_ADC_ConfigChannel+0x7bc>)
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d071      	beq.n	800222c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002148:	483e      	ldr	r0, [pc, #248]	@ (8002244 <HAL_ADC_ConfigChannel+0x7c0>)
 800214a:	f7ff f967 	bl	800141c <LL_ADC_GetCommonPathInternalCh>
 800214e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a3c      	ldr	r2, [pc, #240]	@ (8002248 <HAL_ADC_ConfigChannel+0x7c4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d004      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x6e2>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3a      	ldr	r2, [pc, #232]	@ (800224c <HAL_ADC_ConfigChannel+0x7c8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d127      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800216a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d121      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800217a:	d157      	bne.n	800222c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800217c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002180:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002184:	4619      	mov	r1, r3
 8002186:	482f      	ldr	r0, [pc, #188]	@ (8002244 <HAL_ADC_ConfigChannel+0x7c0>)
 8002188:	f7ff f935 	bl	80013f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800218c:	4b30      	ldr	r3, [pc, #192]	@ (8002250 <HAL_ADC_ConfigChannel+0x7cc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	4a30      	ldr	r2, [pc, #192]	@ (8002254 <HAL_ADC_ConfigChannel+0x7d0>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021a6:	e002      	b.n	80021ae <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f9      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021b4:	e03a      	b.n	800222c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a27      	ldr	r2, [pc, #156]	@ (8002258 <HAL_ADC_ConfigChannel+0x7d4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d113      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10d      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a22      	ldr	r2, [pc, #136]	@ (800225c <HAL_ADC_ConfigChannel+0x7d8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d02a      	beq.n	800222c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021de:	4619      	mov	r1, r3
 80021e0:	4818      	ldr	r0, [pc, #96]	@ (8002244 <HAL_ADC_ConfigChannel+0x7c0>)
 80021e2:	f7ff f908 	bl	80013f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021e6:	e021      	b.n	800222c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002260 <HAL_ADC_ConfigChannel+0x7dc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d11c      	bne.n	800222c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a16      	ldr	r2, [pc, #88]	@ (800225c <HAL_ADC_ConfigChannel+0x7d8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d011      	beq.n	800222c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800220c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002210:	4619      	mov	r1, r3
 8002212:	480c      	ldr	r0, [pc, #48]	@ (8002244 <HAL_ADC_ConfigChannel+0x7c0>)
 8002214:	f7ff f8ef 	bl	80013f6 <LL_ADC_SetCommonPathInternalCh>
 8002218:	e008      	b.n	800222c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221e:	f043 0220 	orr.w	r2, r3, #32
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002234:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002238:	4618      	mov	r0, r3
 800223a:	37d8      	adds	r7, #216	@ 0xd8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	80080000 	.word	0x80080000
 8002244:	50000300 	.word	0x50000300
 8002248:	c3210000 	.word	0xc3210000
 800224c:	90c00010 	.word	0x90c00010
 8002250:	20000000 	.word	0x20000000
 8002254:	053e2d63 	.word	0x053e2d63
 8002258:	c7520000 	.word	0xc7520000
 800225c:	50000100 	.word	0x50000100
 8002260:	cb840000 	.word	0xcb840000

08002264 <LL_ADC_IsEnabled>:
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <LL_ADC_IsEnabled+0x18>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <LL_ADC_IsEnabled+0x1a>
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <LL_ADC_REG_IsConversionOngoing>:
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b04      	cmp	r3, #4
 800229c:	d101      	bne.n	80022a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b0a1      	sub	sp, #132	@ 0x84
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e08b      	b.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80022d6:	2300      	movs	r3, #0
 80022d8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80022da:	2300      	movs	r3, #0
 80022dc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022e6:	d102      	bne.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80022e8:	4b41      	ldr	r3, [pc, #260]	@ (80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	e001      	b.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10b      	bne.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fc:	f043 0220 	orr.w	r2, r3, #32
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e06a      	b.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ffb9 	bl	800228a <LL_ADC_REG_IsConversionOngoing>
 8002318:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ffb3 	bl	800228a <LL_ADC_REG_IsConversionOngoing>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d14c      	bne.n	80023c4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800232a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800232c:	2b00      	cmp	r3, #0
 800232e:	d149      	bne.n	80023c4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002330:	4b30      	ldr	r3, [pc, #192]	@ (80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002332:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d028      	beq.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800233c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800234e:	035b      	lsls	r3, r3, #13
 8002350:	430b      	orrs	r3, r1
 8002352:	431a      	orrs	r2, r3
 8002354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002356:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002358:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800235c:	f7ff ff82 	bl	8002264 <LL_ADC_IsEnabled>
 8002360:	4604      	mov	r4, r0
 8002362:	4823      	ldr	r0, [pc, #140]	@ (80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002364:	f7ff ff7e 	bl	8002264 <LL_ADC_IsEnabled>
 8002368:	4603      	mov	r3, r0
 800236a:	4323      	orrs	r3, r4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d133      	bne.n	80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002370:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002378:	f023 030f 	bic.w	r3, r3, #15
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	6811      	ldr	r1, [r2, #0]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	6892      	ldr	r2, [r2, #8]
 8002384:	430a      	orrs	r2, r1
 8002386:	431a      	orrs	r2, r3
 8002388:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800238a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800238c:	e024      	b.n	80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800238e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002398:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800239a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800239e:	f7ff ff61 	bl	8002264 <LL_ADC_IsEnabled>
 80023a2:	4604      	mov	r4, r0
 80023a4:	4812      	ldr	r0, [pc, #72]	@ (80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023a6:	f7ff ff5d 	bl	8002264 <LL_ADC_IsEnabled>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4323      	orrs	r3, r4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d112      	bne.n	80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80023b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80023ba:	f023 030f 	bic.w	r3, r3, #15
 80023be:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80023c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023c2:	e009      	b.n	80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80023d6:	e000      	b.n	80023da <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80023e2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3784      	adds	r7, #132	@ 0x84
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	50000100 	.word	0x50000100
 80023f4:	50000300 	.word	0x50000300

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	@ (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db0a      	blt.n	8002486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	490c      	ldr	r1, [pc, #48]	@ (80024a8 <__NVIC_SetPriority+0x4c>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	440b      	add	r3, r1
 8002480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002484:	e00a      	b.n	800249c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4908      	ldr	r1, [pc, #32]	@ (80024ac <__NVIC_SetPriority+0x50>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3b04      	subs	r3, #4
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	440b      	add	r3, r1
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f1c3 0307 	rsb	r3, r3, #7
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf28      	it	cs
 80024ce:	2304      	movcs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d902      	bls.n	80024e0 <NVIC_EncodePriority+0x30>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3b03      	subs	r3, #3
 80024de:	e000      	b.n	80024e2 <NVIC_EncodePriority+0x32>
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43d9      	mvns	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	4313      	orrs	r3, r2
         );
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	@ 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002528:	d301      	bcc.n	800252e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <SysTick_Config+0x40>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002536:	210f      	movs	r1, #15
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f7ff ff8e 	bl	800245c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <SysTick_Config+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <SysTick_Config+0x40>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000e010 	.word	0xe000e010

0800255c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff47 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff5e 	bl	8002440 <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff90 	bl	80024b0 <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5f 	bl	800245c <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffb2 	bl	8002518 <SysTick_Config>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e147      	b.n	8002862 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe f8a0 	bl	800072c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0210 	bic.w	r2, r2, #16
 80025fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025fc:	f7fe feba 	bl	8001374 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002602:	e012      	b.n	800262a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002604:	f7fe feb6 	bl	8001374 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b0a      	cmp	r3, #10
 8002610:	d90b      	bls.n	800262a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e11b      	b.n	8002862 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b08      	cmp	r3, #8
 8002636:	d0e5      	beq.n	8002604 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002648:	f7fe fe94 	bl	8001374 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800264e:	e012      	b.n	8002676 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002650:	f7fe fe90 	bl	8001374 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b0a      	cmp	r3, #10
 800265c:	d90b      	bls.n	8002676 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2203      	movs	r2, #3
 800266e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0f5      	b.n	8002862 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0e5      	beq.n	8002650 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0202 	orr.w	r2, r2, #2
 8002692:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a74      	ldr	r2, [pc, #464]	@ (800286c <HAL_FDCAN_Init+0x2ac>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d103      	bne.n	80026a6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800269e:	4a74      	ldr	r2, [pc, #464]	@ (8002870 <HAL_FDCAN_Init+0x2b0>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7c1b      	ldrb	r3, [r3, #16]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d108      	bne.n	80026c0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026bc:	619a      	str	r2, [r3, #24]
 80026be:	e007      	b.n	80026d0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7c5b      	ldrb	r3, [r3, #17]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d108      	bne.n	80026ea <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026e6:	619a      	str	r2, [r3, #24]
 80026e8:	e007      	b.n	80026fa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7c9b      	ldrb	r3, [r3, #18]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d108      	bne.n	8002714 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002710:	619a      	str	r2, [r3, #24]
 8002712:	e007      	b.n	8002724 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002722:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002748:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0210 	bic.w	r2, r2, #16
 8002758:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d108      	bne.n	8002774 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0204 	orr.w	r2, r2, #4
 8002770:	619a      	str	r2, [r3, #24]
 8002772:	e02c      	b.n	80027ce <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d028      	beq.n	80027ce <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d01c      	beq.n	80027be <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002792:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0210 	orr.w	r2, r2, #16
 80027a2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d110      	bne.n	80027ce <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0220 	orr.w	r2, r2, #32
 80027ba:	619a      	str	r2, [r3, #24]
 80027bc:	e007      	b.n	80027ce <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699a      	ldr	r2, [r3, #24]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0220 	orr.w	r2, r2, #32
 80027cc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	3b01      	subs	r3, #1
 80027dc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027de:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80027e6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80027f6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027f8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002802:	d115      	bne.n	8002830 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	3b01      	subs	r3, #1
 8002810:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002812:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	3b01      	subs	r3, #1
 800281a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800281c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	3b01      	subs	r3, #1
 8002826:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800282c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800282e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f814 	bl	8002874 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40006400 	.word	0x40006400
 8002870:	40006500 	.word	0x40006500

08002874 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800287c:	4b27      	ldr	r3, [pc, #156]	@ (800291c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800287e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800288e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002896:	041a      	lsls	r2, r3, #16
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028b4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	061a      	lsls	r2, r3, #24
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e005      	b.n	8002902 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	3304      	adds	r3, #4
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	429a      	cmp	r2, r3
 800290c:	d3f3      	bcc.n	80028f6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800290e:	bf00      	nop
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	4000a400 	.word	0x4000a400

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800292e:	e15a      	b.n	8002be6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 814c 	beq.w	8002be0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d005      	beq.n	8002960 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800295c:	2b02      	cmp	r3, #2
 800295e:	d130      	bne.n	80029c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002996:	2201      	movs	r2, #1
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0201 	and.w	r2, r3, #1
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d017      	beq.n	80029fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d123      	bne.n	8002a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	08da      	lsrs	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3208      	adds	r2, #8
 8002a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	220f      	movs	r2, #15
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	6939      	ldr	r1, [r7, #16]
 8002a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0203 	and.w	r2, r3, #3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80a6 	beq.w	8002be0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a94:	4b5b      	ldr	r3, [pc, #364]	@ (8002c04 <HAL_GPIO_Init+0x2e4>)
 8002a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a98:	4a5a      	ldr	r2, [pc, #360]	@ (8002c04 <HAL_GPIO_Init+0x2e4>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aa0:	4b58      	ldr	r3, [pc, #352]	@ (8002c04 <HAL_GPIO_Init+0x2e4>)
 8002aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aac:	4a56      	ldr	r2, [pc, #344]	@ (8002c08 <HAL_GPIO_Init+0x2e8>)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ad6:	d01f      	beq.n	8002b18 <HAL_GPIO_Init+0x1f8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a4c      	ldr	r2, [pc, #304]	@ (8002c0c <HAL_GPIO_Init+0x2ec>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d019      	beq.n	8002b14 <HAL_GPIO_Init+0x1f4>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a4b      	ldr	r2, [pc, #300]	@ (8002c10 <HAL_GPIO_Init+0x2f0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d013      	beq.n	8002b10 <HAL_GPIO_Init+0x1f0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a4a      	ldr	r2, [pc, #296]	@ (8002c14 <HAL_GPIO_Init+0x2f4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00d      	beq.n	8002b0c <HAL_GPIO_Init+0x1ec>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a49      	ldr	r2, [pc, #292]	@ (8002c18 <HAL_GPIO_Init+0x2f8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d007      	beq.n	8002b08 <HAL_GPIO_Init+0x1e8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a48      	ldr	r2, [pc, #288]	@ (8002c1c <HAL_GPIO_Init+0x2fc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_GPIO_Init+0x1e4>
 8002b00:	2305      	movs	r3, #5
 8002b02:	e00a      	b.n	8002b1a <HAL_GPIO_Init+0x1fa>
 8002b04:	2306      	movs	r3, #6
 8002b06:	e008      	b.n	8002b1a <HAL_GPIO_Init+0x1fa>
 8002b08:	2304      	movs	r3, #4
 8002b0a:	e006      	b.n	8002b1a <HAL_GPIO_Init+0x1fa>
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e004      	b.n	8002b1a <HAL_GPIO_Init+0x1fa>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e002      	b.n	8002b1a <HAL_GPIO_Init+0x1fa>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <HAL_GPIO_Init+0x1fa>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	f002 0203 	and.w	r2, r2, #3
 8002b20:	0092      	lsls	r2, r2, #2
 8002b22:	4093      	lsls	r3, r2
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b2a:	4937      	ldr	r1, [pc, #220]	@ (8002c08 <HAL_GPIO_Init+0x2e8>)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	3302      	adds	r3, #2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b38:	4b39      	ldr	r3, [pc, #228]	@ (8002c20 <HAL_GPIO_Init+0x300>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b5c:	4a30      	ldr	r2, [pc, #192]	@ (8002c20 <HAL_GPIO_Init+0x300>)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b62:	4b2f      	ldr	r3, [pc, #188]	@ (8002c20 <HAL_GPIO_Init+0x300>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b86:	4a26      	ldr	r2, [pc, #152]	@ (8002c20 <HAL_GPIO_Init+0x300>)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b8c:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <HAL_GPIO_Init+0x300>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c20 <HAL_GPIO_Init+0x300>)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c20 <HAL_GPIO_Init+0x300>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bda:	4a11      	ldr	r2, [pc, #68]	@ (8002c20 <HAL_GPIO_Init+0x300>)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3301      	adds	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f47f ae9d 	bne.w	8002930 <HAL_GPIO_Init+0x10>
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	48000400 	.word	0x48000400
 8002c10:	48000800 	.word	0x48000800
 8002c14:	48000c00 	.word	0x48000c00
 8002c18:	48001000 	.word	0x48001000
 8002c1c:	48001400 	.word	0x48001400
 8002c20:	40010400 	.word	0x40010400

08002c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
 8002c30:	4613      	mov	r3, r2
 8002c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c34:	787b      	ldrb	r3, [r7, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0bb      	b.n	8002de2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d101      	bne.n	8002c7a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0b3      	b.n	8002de2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d101      	bne.n	8002c8a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0ab      	b.n	8002de2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8a:	4b58      	ldr	r3, [pc, #352]	@ (8002dec <HAL_OPAMP_Init+0x198>)
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8e:	4a57      	ldr	r2, [pc, #348]	@ (8002dec <HAL_OPAMP_Init+0x198>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c96:	4b55      	ldr	r3, [pc, #340]	@ (8002dec <HAL_OPAMP_Init+0x198>)
 8002c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d103      	bne.n	8002cb6 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fd ff36 	bl	8000b28 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b40      	cmp	r3, #64	@ 0x40
 8002cc2:	d003      	beq.n	8002ccc <HAL_OPAMP_Init+0x78>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b60      	cmp	r3, #96	@ 0x60
 8002cca:	d133      	bne.n	8002d34 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 0110 	bic.w	r1, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b41      	ldr	r3, [pc, #260]	@ (8002df0 <HAL_OPAMP_Init+0x19c>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6851      	ldr	r1, [r2, #4]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6892      	ldr	r2, [r2, #8]
 8002cf4:	4311      	orrs	r1, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6912      	ldr	r2, [r2, #16]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	7d09      	ldrb	r1, [r1, #20]
 8002d00:	2901      	cmp	r1, #1
 8002d02:	d102      	bne.n	8002d0a <HAL_OPAMP_Init+0xb6>
 8002d04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d08:	e000      	b.n	8002d0c <HAL_OPAMP_Init+0xb8>
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d12:	4311      	orrs	r1, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d1e:	04d2      	lsls	r2, r2, #19
 8002d20:	4311      	orrs	r1, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d26:	0612      	lsls	r2, r2, #24
 8002d28:	4311      	orrs	r1, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e035      	b.n	8002da0 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 0110 	bic.w	r1, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b27      	ldr	r3, [pc, #156]	@ (8002df0 <HAL_OPAMP_Init+0x19c>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6851      	ldr	r1, [r2, #4]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6892      	ldr	r2, [r2, #8]
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68d2      	ldr	r2, [r2, #12]
 8002d62:	4311      	orrs	r1, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6912      	ldr	r2, [r2, #16]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	7d09      	ldrb	r1, [r1, #20]
 8002d6e:	2901      	cmp	r1, #1
 8002d70:	d102      	bne.n	8002d78 <HAL_OPAMP_Init+0x124>
 8002d72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d76:	e000      	b.n	8002d7a <HAL_OPAMP_Init+0x126>
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4311      	orrs	r1, r2
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d80:	4311      	orrs	r1, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d86:	4311      	orrs	r1, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d8c:	04d2      	lsls	r2, r2, #19
 8002d8e:	4311      	orrs	r1, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d94:	0612      	lsls	r2, r2, #24
 8002d96:	4311      	orrs	r1, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	db10      	blt.n	8002dcc <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	e0003e11 	.word	0xe0003e11

08002df4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0c0      	b.n	8002f88 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe f9e8 	bl	80011f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2203      	movs	r2, #3
 8002e24:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 f89b 	bl	8005f68 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	73fb      	strb	r3, [r7, #15]
 8002e36:	e03e      	b.n	8002eb6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	440b      	add	r3, r1
 8002e46:	3311      	adds	r3, #17
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	440b      	add	r3, r1
 8002e5a:	3310      	adds	r3, #16
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3313      	adds	r3, #19
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	3320      	adds	r3, #32
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	440b      	add	r3, r1
 8002e96:	3324      	adds	r3, #36	@ 0x24
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	440b      	add	r3, r1
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	791b      	ldrb	r3, [r3, #4]
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d3bb      	bcc.n	8002e38 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	e044      	b.n	8002f50 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	440b      	add	r3, r1
 8002f16:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	791b      	ldrb	r3, [r3, #4]
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d3b5      	bcc.n	8002ec6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f66:	f003 f81a 	bl	8005f9e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7a9b      	ldrb	r3, [r3, #10]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d102      	bne.n	8002f86 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f805 	bl	8002f90 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d141      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffe:	d131      	bne.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003000:	4b47      	ldr	r3, [pc, #284]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003006:	4a46      	ldr	r2, [pc, #280]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800300c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003010:	4b43      	ldr	r3, [pc, #268]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003018:	4a41      	ldr	r2, [pc, #260]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800301e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003020:	4b40      	ldr	r3, [pc, #256]	@ (8003124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2232      	movs	r2, #50	@ 0x32
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	4a3f      	ldr	r2, [pc, #252]	@ (8003128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	0c9b      	lsrs	r3, r3, #18
 8003032:	3301      	adds	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003036:	e002      	b.n	800303e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3b01      	subs	r3, #1
 800303c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800303e:	4b38      	ldr	r3, [pc, #224]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304a:	d102      	bne.n	8003052 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f2      	bne.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003052:	4b33      	ldr	r3, [pc, #204]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305e:	d158      	bne.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e057      	b.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003064:	4b2e      	ldr	r3, [pc, #184]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800306a:	4a2d      	ldr	r2, [pc, #180]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003070:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003074:	e04d      	b.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800307c:	d141      	bne.n	8003102 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800307e:	4b28      	ldr	r3, [pc, #160]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308a:	d131      	bne.n	80030f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800308c:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003092:	4a23      	ldr	r2, [pc, #140]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800309c:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2232      	movs	r2, #50	@ 0x32
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	0c9b      	lsrs	r3, r3, #18
 80030be:	3301      	adds	r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c2:	e002      	b.n	80030ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d6:	d102      	bne.n	80030de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f2      	bne.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ea:	d112      	bne.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e011      	b.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003100:	e007      	b.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003102:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800310a:	4a05      	ldr	r2, [pc, #20]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003110:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	40007000 	.word	0x40007000
 8003124:	20000000 	.word	0x20000000
 8003128:	431bde83 	.word	0x431bde83

0800312c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a04      	ldr	r2, [pc, #16]	@ (8003148 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800313a:	6093      	str	r3, [r2, #8]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40007000 	.word	0x40007000

0800314c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e2fe      	b.n	800375c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d075      	beq.n	8003256 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316a:	4b97      	ldr	r3, [pc, #604]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003174:	4b94      	ldr	r3, [pc, #592]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b0c      	cmp	r3, #12
 8003182:	d102      	bne.n	800318a <HAL_RCC_OscConfig+0x3e>
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d002      	beq.n	8003190 <HAL_RCC_OscConfig+0x44>
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d10b      	bne.n	80031a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	4b8d      	ldr	r3, [pc, #564]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d05b      	beq.n	8003254 <HAL_RCC_OscConfig+0x108>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d157      	bne.n	8003254 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e2d9      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d106      	bne.n	80031c0 <HAL_RCC_OscConfig+0x74>
 80031b2:	4b85      	ldr	r3, [pc, #532]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a84      	ldr	r2, [pc, #528]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e01d      	b.n	80031fc <HAL_RCC_OscConfig+0xb0>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x98>
 80031ca:	4b7f      	ldr	r3, [pc, #508]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a7e      	ldr	r2, [pc, #504]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b7c      	ldr	r3, [pc, #496]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a7b      	ldr	r2, [pc, #492]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e00b      	b.n	80031fc <HAL_RCC_OscConfig+0xb0>
 80031e4:	4b78      	ldr	r3, [pc, #480]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a77      	ldr	r2, [pc, #476]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b75      	ldr	r3, [pc, #468]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a74      	ldr	r2, [pc, #464]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d013      	beq.n	800322c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe f8b6 	bl	8001374 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7fe f8b2 	bl	8001374 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	@ 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e29e      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321e:	4b6a      	ldr	r3, [pc, #424]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0xc0>
 800322a:	e014      	b.n	8003256 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fe f8a2 	bl	8001374 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003234:	f7fe f89e 	bl	8001374 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	@ 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e28a      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003246:	4b60      	ldr	r3, [pc, #384]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0xe8>
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d075      	beq.n	800334e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003262:	4b59      	ldr	r3, [pc, #356]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800326c:	4b56      	ldr	r3, [pc, #344]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b0c      	cmp	r3, #12
 800327a:	d102      	bne.n	8003282 <HAL_RCC_OscConfig+0x136>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d002      	beq.n	8003288 <HAL_RCC_OscConfig+0x13c>
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d11f      	bne.n	80032c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003288:	4b4f      	ldr	r3, [pc, #316]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_OscConfig+0x154>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e25d      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a0:	4b49      	ldr	r3, [pc, #292]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	4946      	ldr	r1, [pc, #280]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032b4:	4b45      	ldr	r3, [pc, #276]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe f80f 	bl	80012dc <HAL_InitTick>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d043      	beq.n	800334c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e249      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d023      	beq.n	8003318 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d0:	4b3d      	ldr	r3, [pc, #244]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3c      	ldr	r2, [pc, #240]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80032d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe f84a 	bl	8001374 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e4:	f7fe f846 	bl	8001374 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e232      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f6:	4b34      	ldr	r3, [pc, #208]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	4b31      	ldr	r3, [pc, #196]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	061b      	lsls	r3, r3, #24
 8003310:	492d      	ldr	r1, [pc, #180]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
 8003316:	e01a      	b.n	800334e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003318:	4b2b      	ldr	r3, [pc, #172]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2a      	ldr	r2, [pc, #168]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800331e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fe f826 	bl	8001374 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332c:	f7fe f822 	bl	8001374 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e20e      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333e:	4b22      	ldr	r3, [pc, #136]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x1e0>
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800334c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d041      	beq.n	80033de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01c      	beq.n	800339c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003362:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003368:	4a17      	ldr	r2, [pc, #92]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7fd ffff 	bl	8001374 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337a:	f7fd fffb 	bl	8001374 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1e7      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800338c:	4b0e      	ldr	r3, [pc, #56]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0ef      	beq.n	800337a <HAL_RCC_OscConfig+0x22e>
 800339a:	e020      	b.n	80033de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339c:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a2:	4a09      	ldr	r2, [pc, #36]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fd ffe2 	bl	8001374 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b2:	e00d      	b.n	80033d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fd ffde 	bl	8001374 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d906      	bls.n	80033d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1ca      	b.n	800375c <HAL_RCC_OscConfig+0x610>
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80033d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1ea      	bne.n	80033b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80a6 	beq.w	8003538 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ec:	2300      	movs	r3, #0
 80033ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033f0:	4b84      	ldr	r3, [pc, #528]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_OscConfig+0x2b4>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x2b6>
 8003400:	2300      	movs	r3, #0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00d      	beq.n	8003422 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003406:	4b7f      	ldr	r3, [pc, #508]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340a:	4a7e      	ldr	r2, [pc, #504]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003410:	6593      	str	r3, [r2, #88]	@ 0x58
 8003412:	4b7c      	ldr	r3, [pc, #496]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003422:	4b79      	ldr	r3, [pc, #484]	@ (8003608 <HAL_RCC_OscConfig+0x4bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800342e:	4b76      	ldr	r3, [pc, #472]	@ (8003608 <HAL_RCC_OscConfig+0x4bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a75      	ldr	r2, [pc, #468]	@ (8003608 <HAL_RCC_OscConfig+0x4bc>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7fd ff9b 	bl	8001374 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7fd ff97 	bl	8001374 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e183      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003454:	4b6c      	ldr	r3, [pc, #432]	@ (8003608 <HAL_RCC_OscConfig+0x4bc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d108      	bne.n	800347a <HAL_RCC_OscConfig+0x32e>
 8003468:	4b66      	ldr	r3, [pc, #408]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346e:	4a65      	ldr	r2, [pc, #404]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003478:	e024      	b.n	80034c4 <HAL_RCC_OscConfig+0x378>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b05      	cmp	r3, #5
 8003480:	d110      	bne.n	80034a4 <HAL_RCC_OscConfig+0x358>
 8003482:	4b60      	ldr	r3, [pc, #384]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003488:	4a5e      	ldr	r2, [pc, #376]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003492:	4b5c      	ldr	r3, [pc, #368]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003498:	4a5a      	ldr	r2, [pc, #360]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034a2:	e00f      	b.n	80034c4 <HAL_RCC_OscConfig+0x378>
 80034a4:	4b57      	ldr	r3, [pc, #348]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034aa:	4a56      	ldr	r2, [pc, #344]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034b4:	4b53      	ldr	r3, [pc, #332]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ba:	4a52      	ldr	r2, [pc, #328]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d016      	beq.n	80034fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fd ff52 	bl	8001374 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fd ff4e 	bl	8001374 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e138      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ea:	4b46      	ldr	r3, [pc, #280]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ed      	beq.n	80034d4 <HAL_RCC_OscConfig+0x388>
 80034f8:	e015      	b.n	8003526 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fa:	f7fd ff3b 	bl	8001374 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003500:	e00a      	b.n	8003518 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fd ff37 	bl	8001374 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e121      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003518:	4b3a      	ldr	r3, [pc, #232]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1ed      	bne.n	8003502 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003526:	7ffb      	ldrb	r3, [r7, #31]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	4b35      	ldr	r3, [pc, #212]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003530:	4a34      	ldr	r2, [pc, #208]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003536:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d03c      	beq.n	80035be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01c      	beq.n	8003586 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800354c:	4b2d      	ldr	r3, [pc, #180]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800354e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003552:	4a2c      	ldr	r2, [pc, #176]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fd ff0a 	bl	8001374 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003564:	f7fd ff06 	bl	8001374 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e0f2      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003576:	4b23      	ldr	r3, [pc, #140]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ef      	beq.n	8003564 <HAL_RCC_OscConfig+0x418>
 8003584:	e01b      	b.n	80035be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003586:	4b1f      	ldr	r3, [pc, #124]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003588:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800358c:	4a1d      	ldr	r2, [pc, #116]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003596:	f7fd feed 	bl	8001374 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800359e:	f7fd fee9 	bl	8001374 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e0d5      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035b0:	4b14      	ldr	r3, [pc, #80]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80035b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ef      	bne.n	800359e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80c9 	beq.w	800375a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	f000 8083 	beq.w	80036dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d15e      	bne.n	800369c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a08      	ldr	r2, [pc, #32]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80035e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fd fec3 	bl	8001374 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f0:	e00c      	b.n	800360c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fd febf 	bl	8001374 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d905      	bls.n	800360c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0ab      	b.n	800375c <HAL_RCC_OscConfig+0x610>
 8003604:	40021000 	.word	0x40021000
 8003608:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360c:	4b55      	ldr	r3, [pc, #340]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ec      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003618:	4b52      	ldr	r3, [pc, #328]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	4b52      	ldr	r3, [pc, #328]	@ (8003768 <HAL_RCC_OscConfig+0x61c>)
 800361e:	4013      	ands	r3, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6a11      	ldr	r1, [r2, #32]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003628:	3a01      	subs	r2, #1
 800362a:	0112      	lsls	r2, r2, #4
 800362c:	4311      	orrs	r1, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003632:	0212      	lsls	r2, r2, #8
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800363a:	0852      	lsrs	r2, r2, #1
 800363c:	3a01      	subs	r2, #1
 800363e:	0552      	lsls	r2, r2, #21
 8003640:	4311      	orrs	r1, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003646:	0852      	lsrs	r2, r2, #1
 8003648:	3a01      	subs	r2, #1
 800364a:	0652      	lsls	r2, r2, #25
 800364c:	4311      	orrs	r1, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003652:	06d2      	lsls	r2, r2, #27
 8003654:	430a      	orrs	r2, r1
 8003656:	4943      	ldr	r1, [pc, #268]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 8003658:	4313      	orrs	r3, r2
 800365a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800365c:	4b41      	ldr	r3, [pc, #260]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a40      	ldr	r2, [pc, #256]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 8003662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003666:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003668:	4b3e      	ldr	r3, [pc, #248]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a3d      	ldr	r2, [pc, #244]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800366e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003672:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7fd fe7e 	bl	8001374 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367c:	f7fd fe7a 	bl	8001374 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e066      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368e:	4b35      	ldr	r3, [pc, #212]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x530>
 800369a:	e05e      	b.n	800375a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369c:	4b31      	ldr	r3, [pc, #196]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a30      	ldr	r2, [pc, #192]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fd fe64 	bl	8001374 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fd fe60 	bl	8001374 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e04c      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c2:	4b28      	ldr	r3, [pc, #160]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036ce:	4b25      	ldr	r3, [pc, #148]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	4924      	ldr	r1, [pc, #144]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 80036d4:	4b25      	ldr	r3, [pc, #148]	@ (800376c <HAL_RCC_OscConfig+0x620>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	60cb      	str	r3, [r1, #12]
 80036da:	e03e      	b.n	800375a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e039      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f003 0203 	and.w	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d12c      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	3b01      	subs	r3, #1
 8003708:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d123      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d11b      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d113      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	3b01      	subs	r3, #1
 800373c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d109      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d001      	beq.n	800375a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	019f800c 	.word	0x019f800c
 800376c:	feeefffc 	.word	0xfeeefffc

08003770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e11e      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b91      	ldr	r3, [pc, #580]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d910      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b8e      	ldr	r3, [pc, #568]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 020f 	bic.w	r2, r3, #15
 800379e:	498c      	ldr	r1, [pc, #560]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b8a      	ldr	r3, [pc, #552]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e106      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d073      	beq.n	80038ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d129      	bne.n	8003820 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037cc:	4b81      	ldr	r3, [pc, #516]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0f4      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037dc:	f000 f99e 	bl	8003b1c <RCC_GetSysClockFreqFromPLLSource>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4a7c      	ldr	r2, [pc, #496]	@ (80039d8 <HAL_RCC_ClockConfig+0x268>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d93f      	bls.n	800386a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037ea:	4b7a      	ldr	r3, [pc, #488]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d033      	beq.n	800386a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003806:	2b00      	cmp	r3, #0
 8003808:	d12f      	bne.n	800386a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800380a:	4b72      	ldr	r3, [pc, #456]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003812:	4a70      	ldr	r2, [pc, #448]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003818:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e024      	b.n	800386a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d107      	bne.n	8003838 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003828:	4b6a      	ldr	r3, [pc, #424]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0c6      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003838:	4b66      	ldr	r3, [pc, #408]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0be      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003848:	f000 f8ce 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800384c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4a61      	ldr	r2, [pc, #388]	@ (80039d8 <HAL_RCC_ClockConfig+0x268>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d909      	bls.n	800386a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003856:	4b5f      	ldr	r3, [pc, #380]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800385e:	4a5d      	ldr	r2, [pc, #372]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003864:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003866:	2380      	movs	r3, #128	@ 0x80
 8003868:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b5a      	ldr	r3, [pc, #360]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4957      	ldr	r1, [pc, #348]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387c:	f7fd fd7a 	bl	8001374 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fd fd76 	bl	8001374 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e095      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b4e      	ldr	r3, [pc, #312]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d023      	beq.n	8003900 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b43      	ldr	r3, [pc, #268]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a42      	ldr	r2, [pc, #264]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038dc:	4b3d      	ldr	r3, [pc, #244]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038e4:	4a3b      	ldr	r2, [pc, #236]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ec:	4b39      	ldr	r3, [pc, #228]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4936      	ldr	r1, [pc, #216]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
 80038fe:	e008      	b.n	8003912 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b80      	cmp	r3, #128	@ 0x80
 8003904:	d105      	bne.n	8003912 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003906:	4b33      	ldr	r3, [pc, #204]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	4a32      	ldr	r2, [pc, #200]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800390c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003910:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003912:	4b2f      	ldr	r3, [pc, #188]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d21d      	bcs.n	800395c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003920:	4b2b      	ldr	r3, [pc, #172]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f023 020f 	bic.w	r2, r3, #15
 8003928:	4929      	ldr	r1, [pc, #164]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003930:	f7fd fd20 	bl	8001374 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fd fd1c 	bl	8001374 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e03b      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d1ed      	bne.n	8003938 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b1a      	ldr	r3, [pc, #104]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4917      	ldr	r1, [pc, #92]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003986:	4b13      	ldr	r3, [pc, #76]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490f      	ldr	r1, [pc, #60]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800399a:	f000 f825 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490c      	ldr	r1, [pc, #48]	@ (80039dc <HAL_RCC_ClockConfig+0x26c>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	4a0a      	ldr	r2, [pc, #40]	@ (80039e0 <HAL_RCC_ClockConfig+0x270>)
 80039b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039ba:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <HAL_RCC_ClockConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fc8c 	bl	80012dc <HAL_InitTick>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	04c4b400 	.word	0x04c4b400
 80039dc:	0800604c 	.word	0x0800604c
 80039e0:	20000000 	.word	0x20000000
 80039e4:	20000004 	.word	0x20000004

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039ee:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d102      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039fa:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	e047      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a00:	4b27      	ldr	r3, [pc, #156]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d102      	bne.n	8003a12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a0c:	4b26      	ldr	r3, [pc, #152]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	e03e      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a12:	4b23      	ldr	r3, [pc, #140]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d136      	bne.n	8003a8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a1e:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	3301      	adds	r3, #1
 8003a34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	4a16      	ldr	r2, [pc, #88]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a46:	68d2      	ldr	r2, [r2, #12]
 8003a48:	0a12      	lsrs	r2, r2, #8
 8003a4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	617b      	str	r3, [r7, #20]
      break;
 8003a54:	e00c      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a56:	4a13      	ldr	r2, [pc, #76]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	4a10      	ldr	r2, [pc, #64]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	0a12      	lsrs	r2, r2, #8
 8003a64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	617b      	str	r3, [r7, #20]
      break;
 8003a6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	0e5b      	lsrs	r3, r3, #25
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e001      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a90:	693b      	ldr	r3, [r7, #16]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	00f42400 	.word	0x00f42400
 8003aa8:	00b71b00 	.word	0x00b71b00

08003aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	@ (8003ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000000 	.word	0x20000000

08003ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ac8:	f7ff fff0 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4904      	ldr	r1, [pc, #16]	@ (8003aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	0800605c 	.word	0x0800605c

08003af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003af4:	f7ff ffda 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0adb      	lsrs	r3, r3, #11
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4904      	ldr	r1, [pc, #16]	@ (8003b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	0800605c 	.word	0x0800605c

08003b1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b22:	4b1e      	ldr	r3, [pc, #120]	@ (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	3301      	adds	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d10c      	bne.n	8003b5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b40:	4a17      	ldr	r2, [pc, #92]	@ (8003ba0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	4a14      	ldr	r2, [pc, #80]	@ (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b4a:	68d2      	ldr	r2, [r2, #12]
 8003b4c:	0a12      	lsrs	r2, r2, #8
 8003b4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	617b      	str	r3, [r7, #20]
    break;
 8003b58:	e00c      	b.n	8003b74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ba4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	4a0e      	ldr	r2, [pc, #56]	@ (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b64:	68d2      	ldr	r2, [r2, #12]
 8003b66:	0a12      	lsrs	r2, r2, #8
 8003b68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b6c:	fb02 f303 	mul.w	r3, r2, r3
 8003b70:	617b      	str	r3, [r7, #20]
    break;
 8003b72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	0e5b      	lsrs	r3, r3, #25
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b8e:	687b      	ldr	r3, [r7, #4]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	00b71b00 	.word	0x00b71b00
 8003ba4:	00f42400 	.word	0x00f42400

08003ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8098 	beq.w	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b43      	ldr	r3, [pc, #268]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10d      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bda:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a39      	ldr	r2, [pc, #228]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bfe:	f7fd fbb9 	bl	8001374 <HAL_GetTick>
 8003c02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c04:	e009      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fd fbb5 	bl	8001374 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d902      	bls.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	74fb      	strb	r3, [r7, #19]
        break;
 8003c18:	e005      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c1a:	4b30      	ldr	r3, [pc, #192]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0ef      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d159      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01e      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d019      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c48:	4b23      	ldr	r3, [pc, #140]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c54:	4b20      	ldr	r3, [pc, #128]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c64:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c74:	4a18      	ldr	r2, [pc, #96]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fd fb75 	bl	8001374 <HAL_GetTick>
 8003c8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8e:	f7fd fb71 	bl	8001374 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d902      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ca4:	e006      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ec      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cba:	4b07      	ldr	r3, [pc, #28]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	4903      	ldr	r1, [pc, #12]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	74bb      	strb	r3, [r7, #18]
 8003cd6:	e005      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce4:	7c7b      	ldrb	r3, [r7, #17]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d105      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cea:	4ba6      	ldr	r3, [pc, #664]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cee:	4aa5      	ldr	r2, [pc, #660]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d02:	4ba0      	ldr	r3, [pc, #640]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d08:	f023 0203 	bic.w	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	499c      	ldr	r1, [pc, #624]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d24:	4b97      	ldr	r3, [pc, #604]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	f023 020c 	bic.w	r2, r3, #12
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	4994      	ldr	r1, [pc, #592]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d46:	4b8f      	ldr	r3, [pc, #572]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	498b      	ldr	r1, [pc, #556]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d68:	4b86      	ldr	r3, [pc, #536]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	4983      	ldr	r1, [pc, #524]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d8a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	497a      	ldr	r1, [pc, #488]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dac:	4b75      	ldr	r3, [pc, #468]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	4972      	ldr	r1, [pc, #456]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dce:	4b6d      	ldr	r3, [pc, #436]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	4969      	ldr	r1, [pc, #420]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003df0:	4b64      	ldr	r3, [pc, #400]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	4961      	ldr	r1, [pc, #388]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e12:	4b5c      	ldr	r3, [pc, #368]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	4958      	ldr	r1, [pc, #352]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d015      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e34:	4b53      	ldr	r3, [pc, #332]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e42:	4950      	ldr	r1, [pc, #320]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e52:	d105      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e54:	4b4b      	ldr	r3, [pc, #300]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4a4a      	ldr	r2, [pc, #296]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d015      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e6c:	4b45      	ldr	r3, [pc, #276]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	4942      	ldr	r1, [pc, #264]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e8a:	d105      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a3c      	ldr	r2, [pc, #240]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e96:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ea4:	4b37      	ldr	r3, [pc, #220]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eaa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	4934      	ldr	r1, [pc, #208]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ece:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003edc:	4b29      	ldr	r3, [pc, #164]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eea:	4926      	ldr	r1, [pc, #152]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003efa:	d105      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efc:	4b21      	ldr	r3, [pc, #132]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a20      	ldr	r2, [pc, #128]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d015      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f14:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	4918      	ldr	r1, [pc, #96]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f32:	d105      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f34:	4b13      	ldr	r3, [pc, #76]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a12      	ldr	r2, [pc, #72]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d015      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5a:	490a      	ldr	r1, [pc, #40]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a04      	ldr	r2, [pc, #16]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f78:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000

08003f88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e09d      	b.n	80040d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d108      	bne.n	8003fb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003faa:	d009      	beq.n	8003fc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	61da      	str	r2, [r3, #28]
 8003fb2:	e005      	b.n	8003fc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fc fe74 	bl	8000cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004000:	d902      	bls.n	8004008 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e002      	b.n	800400e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800400c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004016:	d007      	beq.n	8004028 <HAL_SPI_Init+0xa0>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004020:	d002      	beq.n	8004028 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	ea42 0103 	orr.w	r1, r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004072:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	f003 0204 	and.w	r2, r3, #4
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80040a4:	ea42 0103 	orr.w	r1, r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b08a      	sub	sp, #40	@ 0x28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040ec:	2301      	movs	r3, #1
 80040ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x26>
 8004100:	2302      	movs	r3, #2
 8004102:	e20a      	b.n	800451a <HAL_SPI_TransmitReceive+0x43c>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800410c:	f7fd f932 	bl	8001374 <HAL_GetTick>
 8004110:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004118:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004124:	887b      	ldrh	r3, [r7, #2]
 8004126:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004128:	7efb      	ldrb	r3, [r7, #27]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d00e      	beq.n	800414c <HAL_SPI_TransmitReceive+0x6e>
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004134:	d106      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x66>
 800413e:	7efb      	ldrb	r3, [r7, #27]
 8004140:	2b04      	cmp	r3, #4
 8004142:	d003      	beq.n	800414c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004144:	2302      	movs	r3, #2
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800414a:	e1e0      	b.n	800450e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_SPI_TransmitReceive+0x80>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_SPI_TransmitReceive+0x80>
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004164:	e1d3      	b.n	800450e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b04      	cmp	r3, #4
 8004170:	d003      	beq.n	800417a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2205      	movs	r2, #5
 8004176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	887a      	ldrh	r2, [r7, #2]
 800418a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	887a      	ldrh	r2, [r7, #2]
 8004192:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041bc:	d802      	bhi.n	80041c4 <HAL_SPI_TransmitReceive+0xe6>
 80041be:	8a3b      	ldrh	r3, [r7, #16]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d908      	bls.n	80041d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041d2:	605a      	str	r2, [r3, #4]
 80041d4:	e007      	b.n	80041e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f0:	2b40      	cmp	r3, #64	@ 0x40
 80041f2:	d007      	beq.n	8004204 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004202:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800420c:	f240 8081 	bls.w	8004312 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_SPI_TransmitReceive+0x140>
 8004218:	8a7b      	ldrh	r3, [r7, #18]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d16d      	bne.n	80042fa <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004222:	881a      	ldrh	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422e:	1c9a      	adds	r2, r3, #2
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004242:	e05a      	b.n	80042fa <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d11b      	bne.n	800428a <HAL_SPI_TransmitReceive+0x1ac>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d016      	beq.n	800428a <HAL_SPI_TransmitReceive+0x1ac>
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	2b01      	cmp	r3, #1
 8004260:	d113      	bne.n	800428a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004266:	881a      	ldrh	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004272:	1c9a      	adds	r2, r3, #2
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d11c      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x1f4>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	b292      	uxth	r2, r2
 80042b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	1c9a      	adds	r2, r3, #2
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042ce:	2301      	movs	r3, #1
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042d2:	f7fd f84f 	bl	8001374 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042de:	429a      	cmp	r2, r3
 80042e0:	d80b      	bhi.n	80042fa <HAL_SPI_TransmitReceive+0x21c>
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d007      	beq.n	80042fa <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80042f8:	e109      	b.n	800450e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d19f      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x166>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d199      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x166>
 8004310:	e0e3      	b.n	80044da <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_SPI_TransmitReceive+0x244>
 800431a:	8a7b      	ldrh	r3, [r7, #18]
 800431c:	2b01      	cmp	r3, #1
 800431e:	f040 80cf 	bne.w	80044c0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d912      	bls.n	8004352 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	881a      	ldrh	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433c:	1c9a      	adds	r2, r3, #2
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b02      	subs	r3, #2
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004350:	e0b6      	b.n	80044c0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004378:	e0a2      	b.n	80044c0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d134      	bne.n	80043f2 <HAL_SPI_TransmitReceive+0x314>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d02f      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x314>
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	2b01      	cmp	r3, #1
 8004396:	d12c      	bne.n	80043f2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d912      	bls.n	80043c8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b2:	1c9a      	adds	r2, r3, #2
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b02      	subs	r3, #2
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043c6:	e012      	b.n	80043ee <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d148      	bne.n	8004492 <HAL_SPI_TransmitReceive+0x3b4>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d042      	beq.n	8004492 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d923      	bls.n	8004460 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	b292      	uxth	r2, r2
 8004424:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	1c9a      	adds	r2, r3, #2
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b02      	subs	r3, #2
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b01      	cmp	r3, #1
 800444c:	d81f      	bhi.n	800448e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	e016      	b.n	800448e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f103 020c 	add.w	r2, r3, #12
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446c:	7812      	ldrb	r2, [r2, #0]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800448e:	2301      	movs	r3, #1
 8004490:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004492:	f7fc ff6f 	bl	8001374 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800449e:	429a      	cmp	r2, r3
 80044a0:	d803      	bhi.n	80044aa <HAL_SPI_TransmitReceive+0x3cc>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d102      	bne.n	80044b0 <HAL_SPI_TransmitReceive+0x3d2>
 80044aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80044be:	e026      	b.n	800450e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f47f af57 	bne.w	800437a <HAL_SPI_TransmitReceive+0x29c>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f47f af50 	bne.w	800437a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f93e 	bl	8004760 <SPI_EndRxTxTransaction>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004504:	e003      	b.n	800450e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004516:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800451a:	4618      	mov	r0, r3
 800451c:	3728      	adds	r7, #40	@ 0x28
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	4613      	mov	r3, r2
 8004532:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004534:	f7fc ff1e 	bl	8001374 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	4413      	add	r3, r2
 8004542:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004544:	f7fc ff16 	bl	8001374 <HAL_GetTick>
 8004548:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800454a:	4b39      	ldr	r3, [pc, #228]	@ (8004630 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	015b      	lsls	r3, r3, #5
 8004550:	0d1b      	lsrs	r3, r3, #20
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	fb02 f303 	mul.w	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800455a:	e054      	b.n	8004606 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004562:	d050      	beq.n	8004606 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004564:	f7fc ff06 	bl	8001374 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	429a      	cmp	r2, r3
 8004572:	d902      	bls.n	800457a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d13d      	bne.n	80045f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004588:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004592:	d111      	bne.n	80045b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800459c:	d004      	beq.n	80045a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a6:	d107      	bne.n	80045b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045c0:	d10f      	bne.n	80045e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e017      	b.n	8004626 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	3b01      	subs	r3, #1
 8004604:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4013      	ands	r3, r2
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	429a      	cmp	r2, r3
 8004622:	d19b      	bne.n	800455c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000000 	.word	0x20000000

08004634 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	@ 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004646:	f7fc fe95 	bl	8001374 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	4413      	add	r3, r2
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004656:	f7fc fe8d 	bl	8001374 <HAL_GetTick>
 800465a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004664:	4b3d      	ldr	r3, [pc, #244]	@ (800475c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	00da      	lsls	r2, r3, #3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	0d1b      	lsrs	r3, r3, #20
 8004674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800467c:	e060      	b.n	8004740 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004684:	d107      	bne.n	8004696 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004694:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d050      	beq.n	8004740 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800469e:	f7fc fe69 	bl	8001374 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d902      	bls.n	80046b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d13d      	bne.n	8004730 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80046c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046cc:	d111      	bne.n	80046f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046d6:	d004      	beq.n	80046e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e0:	d107      	bne.n	80046f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046fa:	d10f      	bne.n	800471c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800471a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e010      	b.n	8004752 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	3b01      	subs	r3, #1
 800473e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	429a      	cmp	r2, r3
 800474e:	d196      	bne.n	800467e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3728      	adds	r7, #40	@ 0x28
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000000 	.word	0x20000000

08004760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2200      	movs	r2, #0
 8004774:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f7ff ff5b 	bl	8004634 <SPI_WaitFifoStateUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004788:	f043 0220 	orr.w	r2, r3, #32
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e027      	b.n	80047e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	2180      	movs	r1, #128	@ 0x80
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff fec0 	bl	8004524 <SPI_WaitFlagStateUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e014      	b.n	80047e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff ff34 	bl	8004634 <SPI_WaitFifoStateUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e000      	b.n	80047e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e049      	b.n	8004892 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc fbac 	bl	8000f70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f000 f94a 	bl	8004ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e0ff      	b.n	8004aba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b14      	cmp	r3, #20
 80048c6:	f200 80f0 	bhi.w	8004aaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048ca:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	08004925 	.word	0x08004925
 80048d4:	08004aab 	.word	0x08004aab
 80048d8:	08004aab 	.word	0x08004aab
 80048dc:	08004aab 	.word	0x08004aab
 80048e0:	08004965 	.word	0x08004965
 80048e4:	08004aab 	.word	0x08004aab
 80048e8:	08004aab 	.word	0x08004aab
 80048ec:	08004aab 	.word	0x08004aab
 80048f0:	080049a7 	.word	0x080049a7
 80048f4:	08004aab 	.word	0x08004aab
 80048f8:	08004aab 	.word	0x08004aab
 80048fc:	08004aab 	.word	0x08004aab
 8004900:	080049e7 	.word	0x080049e7
 8004904:	08004aab 	.word	0x08004aab
 8004908:	08004aab 	.word	0x08004aab
 800490c:	08004aab 	.word	0x08004aab
 8004910:	08004a29 	.word	0x08004a29
 8004914:	08004aab 	.word	0x08004aab
 8004918:	08004aab 	.word	0x08004aab
 800491c:	08004aab 	.word	0x08004aab
 8004920:	08004a69 	.word	0x08004a69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f966 	bl	8004bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0208 	orr.w	r2, r2, #8
 800493e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0204 	bic.w	r2, r2, #4
 800494e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6999      	ldr	r1, [r3, #24]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	619a      	str	r2, [r3, #24]
      break;
 8004962:	e0a5      	b.n	8004ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f9d6 	bl	8004d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800497e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800498e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6999      	ldr	r1, [r3, #24]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	021a      	lsls	r2, r3, #8
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	619a      	str	r2, [r3, #24]
      break;
 80049a4:	e084      	b.n	8004ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fa3f 	bl	8004e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0208 	orr.w	r2, r2, #8
 80049c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0204 	bic.w	r2, r2, #4
 80049d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69d9      	ldr	r1, [r3, #28]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	61da      	str	r2, [r3, #28]
      break;
 80049e4:	e064      	b.n	8004ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 faa7 	bl	8004f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69d9      	ldr	r1, [r3, #28]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	021a      	lsls	r2, r3, #8
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	61da      	str	r2, [r3, #28]
      break;
 8004a26:	e043      	b.n	8004ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fb10 	bl	8005054 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0208 	orr.w	r2, r2, #8
 8004a42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0204 	bic.w	r2, r2, #4
 8004a52:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004a66:	e023      	b.n	8004ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fb54 	bl	800511c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a92:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	021a      	lsls	r2, r3, #8
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004aa8:	e002      	b.n	8004ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
      break;
 8004aae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop

08004ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a42      	ldr	r2, [pc, #264]	@ (8004be0 <TIM_Base_SetConfig+0x11c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00f      	beq.n	8004afc <TIM_Base_SetConfig+0x38>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae2:	d00b      	beq.n	8004afc <TIM_Base_SetConfig+0x38>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8004be4 <TIM_Base_SetConfig+0x120>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_Base_SetConfig+0x38>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a3e      	ldr	r2, [pc, #248]	@ (8004be8 <TIM_Base_SetConfig+0x124>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_Base_SetConfig+0x38>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a3d      	ldr	r2, [pc, #244]	@ (8004bec <TIM_Base_SetConfig+0x128>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d108      	bne.n	8004b0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a33      	ldr	r2, [pc, #204]	@ (8004be0 <TIM_Base_SetConfig+0x11c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01b      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1c:	d017      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a30      	ldr	r2, [pc, #192]	@ (8004be4 <TIM_Base_SetConfig+0x120>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a2f      	ldr	r2, [pc, #188]	@ (8004be8 <TIM_Base_SetConfig+0x124>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00f      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a2e      	ldr	r2, [pc, #184]	@ (8004bec <TIM_Base_SetConfig+0x128>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a2d      	ldr	r2, [pc, #180]	@ (8004bf0 <TIM_Base_SetConfig+0x12c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d007      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf4 <TIM_Base_SetConfig+0x130>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <TIM_Base_SetConfig+0x134>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d108      	bne.n	8004b60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a16      	ldr	r2, [pc, #88]	@ (8004be0 <TIM_Base_SetConfig+0x11c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00f      	beq.n	8004bac <TIM_Base_SetConfig+0xe8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a17      	ldr	r2, [pc, #92]	@ (8004bec <TIM_Base_SetConfig+0x128>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <TIM_Base_SetConfig+0xe8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a16      	ldr	r2, [pc, #88]	@ (8004bf0 <TIM_Base_SetConfig+0x12c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_Base_SetConfig+0xe8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a15      	ldr	r2, [pc, #84]	@ (8004bf4 <TIM_Base_SetConfig+0x130>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_Base_SetConfig+0xe8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a14      	ldr	r2, [pc, #80]	@ (8004bf8 <TIM_Base_SetConfig+0x134>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d103      	bne.n	8004bb4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d105      	bne.n	8004bd2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f023 0201 	bic.w	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	611a      	str	r2, [r3, #16]
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40012c00 	.word	0x40012c00
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40013400 	.word	0x40013400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40014400 	.word	0x40014400
 8004bf8:	40014800 	.word	0x40014800

08004bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f023 0201 	bic.w	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f023 0302 	bic.w	r3, r3, #2
 8004c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a2c      	ldr	r2, [pc, #176]	@ (8004d08 <TIM_OC1_SetConfig+0x10c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00f      	beq.n	8004c7c <TIM_OC1_SetConfig+0x80>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a2b      	ldr	r2, [pc, #172]	@ (8004d0c <TIM_OC1_SetConfig+0x110>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00b      	beq.n	8004c7c <TIM_OC1_SetConfig+0x80>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a2a      	ldr	r2, [pc, #168]	@ (8004d10 <TIM_OC1_SetConfig+0x114>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_OC1_SetConfig+0x80>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a29      	ldr	r2, [pc, #164]	@ (8004d14 <TIM_OC1_SetConfig+0x118>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_OC1_SetConfig+0x80>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a28      	ldr	r2, [pc, #160]	@ (8004d18 <TIM_OC1_SetConfig+0x11c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d10c      	bne.n	8004c96 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0308 	bic.w	r3, r3, #8
 8004c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a1b      	ldr	r2, [pc, #108]	@ (8004d08 <TIM_OC1_SetConfig+0x10c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00f      	beq.n	8004cbe <TIM_OC1_SetConfig+0xc2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8004d0c <TIM_OC1_SetConfig+0x110>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00b      	beq.n	8004cbe <TIM_OC1_SetConfig+0xc2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a19      	ldr	r2, [pc, #100]	@ (8004d10 <TIM_OC1_SetConfig+0x114>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d007      	beq.n	8004cbe <TIM_OC1_SetConfig+0xc2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a18      	ldr	r2, [pc, #96]	@ (8004d14 <TIM_OC1_SetConfig+0x118>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d003      	beq.n	8004cbe <TIM_OC1_SetConfig+0xc2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a17      	ldr	r2, [pc, #92]	@ (8004d18 <TIM_OC1_SetConfig+0x11c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d111      	bne.n	8004ce2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40013400 	.word	0x40013400
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800

08004d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f023 0210 	bic.w	r2, r3, #16
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0320 	bic.w	r3, r3, #32
 8004d6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a28      	ldr	r2, [pc, #160]	@ (8004e1c <TIM_OC2_SetConfig+0x100>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_OC2_SetConfig+0x6c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a27      	ldr	r2, [pc, #156]	@ (8004e20 <TIM_OC2_SetConfig+0x104>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d10d      	bne.n	8004da4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004da2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e1c <TIM_OC2_SetConfig+0x100>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <TIM_OC2_SetConfig+0xb0>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a1c      	ldr	r2, [pc, #112]	@ (8004e20 <TIM_OC2_SetConfig+0x104>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_OC2_SetConfig+0xb0>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e24 <TIM_OC2_SetConfig+0x108>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_OC2_SetConfig+0xb0>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8004e28 <TIM_OC2_SetConfig+0x10c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC2_SetConfig+0xb0>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a19      	ldr	r2, [pc, #100]	@ (8004e2c <TIM_OC2_SetConfig+0x110>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d113      	bne.n	8004df4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40013400 	.word	0x40013400
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800

08004e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a27      	ldr	r2, [pc, #156]	@ (8004f2c <TIM_OC3_SetConfig+0xfc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_OC3_SetConfig+0x6a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a26      	ldr	r2, [pc, #152]	@ (8004f30 <TIM_OC3_SetConfig+0x100>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d10d      	bne.n	8004eb6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8004f2c <TIM_OC3_SetConfig+0xfc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00f      	beq.n	8004ede <TIM_OC3_SetConfig+0xae>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f30 <TIM_OC3_SetConfig+0x100>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <TIM_OC3_SetConfig+0xae>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f34 <TIM_OC3_SetConfig+0x104>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <TIM_OC3_SetConfig+0xae>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a19      	ldr	r2, [pc, #100]	@ (8004f38 <TIM_OC3_SetConfig+0x108>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_OC3_SetConfig+0xae>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a18      	ldr	r2, [pc, #96]	@ (8004f3c <TIM_OC3_SetConfig+0x10c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d113      	bne.n	8004f06 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	621a      	str	r2, [r3, #32]
}
 8004f20:	bf00      	nop
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	40012c00 	.word	0x40012c00
 8004f30:	40013400 	.word	0x40013400
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800

08004f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	031b      	lsls	r3, r3, #12
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a28      	ldr	r2, [pc, #160]	@ (8005040 <TIM_OC4_SetConfig+0x100>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_OC4_SetConfig+0x6c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a27      	ldr	r2, [pc, #156]	@ (8005044 <TIM_OC4_SetConfig+0x104>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10d      	bne.n	8004fc8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	031b      	lsls	r3, r3, #12
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a1d      	ldr	r2, [pc, #116]	@ (8005040 <TIM_OC4_SetConfig+0x100>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00f      	beq.n	8004ff0 <TIM_OC4_SetConfig+0xb0>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005044 <TIM_OC4_SetConfig+0x104>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_OC4_SetConfig+0xb0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a1b      	ldr	r2, [pc, #108]	@ (8005048 <TIM_OC4_SetConfig+0x108>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_OC4_SetConfig+0xb0>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800504c <TIM_OC4_SetConfig+0x10c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_OC4_SetConfig+0xb0>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a19      	ldr	r2, [pc, #100]	@ (8005050 <TIM_OC4_SetConfig+0x110>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d113      	bne.n	8005018 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ff6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ffe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	019b      	lsls	r3, r3, #6
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	019b      	lsls	r3, r3, #6
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40013400 	.word	0x40013400
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800

08005054 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005098:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	041b      	lsls	r3, r3, #16
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a17      	ldr	r2, [pc, #92]	@ (8005108 <TIM_OC5_SetConfig+0xb4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00f      	beq.n	80050ce <TIM_OC5_SetConfig+0x7a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a16      	ldr	r2, [pc, #88]	@ (800510c <TIM_OC5_SetConfig+0xb8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00b      	beq.n	80050ce <TIM_OC5_SetConfig+0x7a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a15      	ldr	r2, [pc, #84]	@ (8005110 <TIM_OC5_SetConfig+0xbc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d007      	beq.n	80050ce <TIM_OC5_SetConfig+0x7a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a14      	ldr	r2, [pc, #80]	@ (8005114 <TIM_OC5_SetConfig+0xc0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d003      	beq.n	80050ce <TIM_OC5_SetConfig+0x7a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a13      	ldr	r2, [pc, #76]	@ (8005118 <TIM_OC5_SetConfig+0xc4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d109      	bne.n	80050e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	621a      	str	r2, [r3, #32]
}
 80050fc:	bf00      	nop
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40013400 	.word	0x40013400
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400
 8005118:	40014800 	.word	0x40014800

0800511c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800514e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	051b      	lsls	r3, r3, #20
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a18      	ldr	r2, [pc, #96]	@ (80051d4 <TIM_OC6_SetConfig+0xb8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00f      	beq.n	8005198 <TIM_OC6_SetConfig+0x7c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a17      	ldr	r2, [pc, #92]	@ (80051d8 <TIM_OC6_SetConfig+0xbc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00b      	beq.n	8005198 <TIM_OC6_SetConfig+0x7c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a16      	ldr	r2, [pc, #88]	@ (80051dc <TIM_OC6_SetConfig+0xc0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <TIM_OC6_SetConfig+0x7c>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a15      	ldr	r2, [pc, #84]	@ (80051e0 <TIM_OC6_SetConfig+0xc4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_OC6_SetConfig+0x7c>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a14      	ldr	r2, [pc, #80]	@ (80051e4 <TIM_OC6_SetConfig+0xc8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d109      	bne.n	80051ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800519e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	029b      	lsls	r3, r3, #10
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40013400 	.word	0x40013400
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40014400 	.word	0x40014400
 80051e4:	40014800 	.word	0x40014800

080051e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e065      	b.n	80052cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a2c      	ldr	r2, [pc, #176]	@ (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2b      	ldr	r2, [pc, #172]	@ (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d108      	bne.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800523a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800524c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005250:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1b      	ldr	r2, [pc, #108]	@ (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d018      	beq.n	80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005276:	d013      	beq.n	80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a18      	ldr	r2, [pc, #96]	@ (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00e      	beq.n	80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a17      	ldr	r2, [pc, #92]	@ (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d009      	beq.n	80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a12      	ldr	r2, [pc, #72]	@ (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a13      	ldr	r2, [pc, #76]	@ (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d10c      	bne.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40014000 	.word	0x40014000

080052ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e042      	b.n	8005384 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fb feeb 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2224      	movs	r2, #36	@ 0x24
 800531a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 faf4 	bl	8005924 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f825 	bl	800538c <UART_SetConfig>
 8005342:	4603      	mov	r3, r0
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e01b      	b.n	8005384 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800535a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800536a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fb73 	bl	8005a68 <UART_CheckIdleState>
 8005382:	4603      	mov	r3, r0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005390:	b08c      	sub	sp, #48	@ 0x30
 8005392:	af00      	add	r7, sp, #0
 8005394:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4bab      	ldr	r3, [pc, #684]	@ (8005668 <UART_SetConfig+0x2dc>)
 80053bc:	4013      	ands	r3, r2
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053c4:	430b      	orrs	r3, r1
 80053c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4aa0      	ldr	r2, [pc, #640]	@ (800566c <UART_SetConfig+0x2e0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053f4:	4313      	orrs	r3, r2
 80053f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005402:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800540c:	430b      	orrs	r3, r1
 800540e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005416:	f023 010f 	bic.w	r1, r3, #15
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a91      	ldr	r2, [pc, #580]	@ (8005670 <UART_SetConfig+0x2e4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d125      	bne.n	800547c <UART_SetConfig+0xf0>
 8005430:	4b90      	ldr	r3, [pc, #576]	@ (8005674 <UART_SetConfig+0x2e8>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b03      	cmp	r3, #3
 800543c:	d81a      	bhi.n	8005474 <UART_SetConfig+0xe8>
 800543e:	a201      	add	r2, pc, #4	@ (adr r2, 8005444 <UART_SetConfig+0xb8>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	08005455 	.word	0x08005455
 8005448:	08005465 	.word	0x08005465
 800544c:	0800545d 	.word	0x0800545d
 8005450:	0800546d 	.word	0x0800546d
 8005454:	2301      	movs	r3, #1
 8005456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545a:	e0d6      	b.n	800560a <UART_SetConfig+0x27e>
 800545c:	2302      	movs	r3, #2
 800545e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005462:	e0d2      	b.n	800560a <UART_SetConfig+0x27e>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546a:	e0ce      	b.n	800560a <UART_SetConfig+0x27e>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005472:	e0ca      	b.n	800560a <UART_SetConfig+0x27e>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547a:	e0c6      	b.n	800560a <UART_SetConfig+0x27e>
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a7d      	ldr	r2, [pc, #500]	@ (8005678 <UART_SetConfig+0x2ec>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d138      	bne.n	80054f8 <UART_SetConfig+0x16c>
 8005486:	4b7b      	ldr	r3, [pc, #492]	@ (8005674 <UART_SetConfig+0x2e8>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548c:	f003 030c 	and.w	r3, r3, #12
 8005490:	2b0c      	cmp	r3, #12
 8005492:	d82d      	bhi.n	80054f0 <UART_SetConfig+0x164>
 8005494:	a201      	add	r2, pc, #4	@ (adr r2, 800549c <UART_SetConfig+0x110>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	080054d1 	.word	0x080054d1
 80054a0:	080054f1 	.word	0x080054f1
 80054a4:	080054f1 	.word	0x080054f1
 80054a8:	080054f1 	.word	0x080054f1
 80054ac:	080054e1 	.word	0x080054e1
 80054b0:	080054f1 	.word	0x080054f1
 80054b4:	080054f1 	.word	0x080054f1
 80054b8:	080054f1 	.word	0x080054f1
 80054bc:	080054d9 	.word	0x080054d9
 80054c0:	080054f1 	.word	0x080054f1
 80054c4:	080054f1 	.word	0x080054f1
 80054c8:	080054f1 	.word	0x080054f1
 80054cc:	080054e9 	.word	0x080054e9
 80054d0:	2300      	movs	r3, #0
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d6:	e098      	b.n	800560a <UART_SetConfig+0x27e>
 80054d8:	2302      	movs	r3, #2
 80054da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054de:	e094      	b.n	800560a <UART_SetConfig+0x27e>
 80054e0:	2304      	movs	r3, #4
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e6:	e090      	b.n	800560a <UART_SetConfig+0x27e>
 80054e8:	2308      	movs	r3, #8
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ee:	e08c      	b.n	800560a <UART_SetConfig+0x27e>
 80054f0:	2310      	movs	r3, #16
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f6:	e088      	b.n	800560a <UART_SetConfig+0x27e>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a5f      	ldr	r2, [pc, #380]	@ (800567c <UART_SetConfig+0x2f0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d125      	bne.n	800554e <UART_SetConfig+0x1c2>
 8005502:	4b5c      	ldr	r3, [pc, #368]	@ (8005674 <UART_SetConfig+0x2e8>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005508:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800550c:	2b30      	cmp	r3, #48	@ 0x30
 800550e:	d016      	beq.n	800553e <UART_SetConfig+0x1b2>
 8005510:	2b30      	cmp	r3, #48	@ 0x30
 8005512:	d818      	bhi.n	8005546 <UART_SetConfig+0x1ba>
 8005514:	2b20      	cmp	r3, #32
 8005516:	d00a      	beq.n	800552e <UART_SetConfig+0x1a2>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d814      	bhi.n	8005546 <UART_SetConfig+0x1ba>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <UART_SetConfig+0x19a>
 8005520:	2b10      	cmp	r3, #16
 8005522:	d008      	beq.n	8005536 <UART_SetConfig+0x1aa>
 8005524:	e00f      	b.n	8005546 <UART_SetConfig+0x1ba>
 8005526:	2300      	movs	r3, #0
 8005528:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800552c:	e06d      	b.n	800560a <UART_SetConfig+0x27e>
 800552e:	2302      	movs	r3, #2
 8005530:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005534:	e069      	b.n	800560a <UART_SetConfig+0x27e>
 8005536:	2304      	movs	r3, #4
 8005538:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553c:	e065      	b.n	800560a <UART_SetConfig+0x27e>
 800553e:	2308      	movs	r3, #8
 8005540:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005544:	e061      	b.n	800560a <UART_SetConfig+0x27e>
 8005546:	2310      	movs	r3, #16
 8005548:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800554c:	e05d      	b.n	800560a <UART_SetConfig+0x27e>
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a4b      	ldr	r2, [pc, #300]	@ (8005680 <UART_SetConfig+0x2f4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d125      	bne.n	80055a4 <UART_SetConfig+0x218>
 8005558:	4b46      	ldr	r3, [pc, #280]	@ (8005674 <UART_SetConfig+0x2e8>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005562:	2bc0      	cmp	r3, #192	@ 0xc0
 8005564:	d016      	beq.n	8005594 <UART_SetConfig+0x208>
 8005566:	2bc0      	cmp	r3, #192	@ 0xc0
 8005568:	d818      	bhi.n	800559c <UART_SetConfig+0x210>
 800556a:	2b80      	cmp	r3, #128	@ 0x80
 800556c:	d00a      	beq.n	8005584 <UART_SetConfig+0x1f8>
 800556e:	2b80      	cmp	r3, #128	@ 0x80
 8005570:	d814      	bhi.n	800559c <UART_SetConfig+0x210>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <UART_SetConfig+0x1f0>
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d008      	beq.n	800558c <UART_SetConfig+0x200>
 800557a:	e00f      	b.n	800559c <UART_SetConfig+0x210>
 800557c:	2300      	movs	r3, #0
 800557e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005582:	e042      	b.n	800560a <UART_SetConfig+0x27e>
 8005584:	2302      	movs	r3, #2
 8005586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558a:	e03e      	b.n	800560a <UART_SetConfig+0x27e>
 800558c:	2304      	movs	r3, #4
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005592:	e03a      	b.n	800560a <UART_SetConfig+0x27e>
 8005594:	2308      	movs	r3, #8
 8005596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559a:	e036      	b.n	800560a <UART_SetConfig+0x27e>
 800559c:	2310      	movs	r3, #16
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a2:	e032      	b.n	800560a <UART_SetConfig+0x27e>
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a30      	ldr	r2, [pc, #192]	@ (800566c <UART_SetConfig+0x2e0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d12a      	bne.n	8005604 <UART_SetConfig+0x278>
 80055ae:	4b31      	ldr	r3, [pc, #196]	@ (8005674 <UART_SetConfig+0x2e8>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055bc:	d01a      	beq.n	80055f4 <UART_SetConfig+0x268>
 80055be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055c2:	d81b      	bhi.n	80055fc <UART_SetConfig+0x270>
 80055c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c8:	d00c      	beq.n	80055e4 <UART_SetConfig+0x258>
 80055ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ce:	d815      	bhi.n	80055fc <UART_SetConfig+0x270>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <UART_SetConfig+0x250>
 80055d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055d8:	d008      	beq.n	80055ec <UART_SetConfig+0x260>
 80055da:	e00f      	b.n	80055fc <UART_SetConfig+0x270>
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e2:	e012      	b.n	800560a <UART_SetConfig+0x27e>
 80055e4:	2302      	movs	r3, #2
 80055e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ea:	e00e      	b.n	800560a <UART_SetConfig+0x27e>
 80055ec:	2304      	movs	r3, #4
 80055ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f2:	e00a      	b.n	800560a <UART_SetConfig+0x27e>
 80055f4:	2308      	movs	r3, #8
 80055f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055fa:	e006      	b.n	800560a <UART_SetConfig+0x27e>
 80055fc:	2310      	movs	r3, #16
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005602:	e002      	b.n	800560a <UART_SetConfig+0x27e>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a17      	ldr	r2, [pc, #92]	@ (800566c <UART_SetConfig+0x2e0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	f040 80a8 	bne.w	8005766 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005616:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800561a:	2b08      	cmp	r3, #8
 800561c:	d834      	bhi.n	8005688 <UART_SetConfig+0x2fc>
 800561e:	a201      	add	r2, pc, #4	@ (adr r2, 8005624 <UART_SetConfig+0x298>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005649 	.word	0x08005649
 8005628:	08005689 	.word	0x08005689
 800562c:	08005651 	.word	0x08005651
 8005630:	08005689 	.word	0x08005689
 8005634:	08005657 	.word	0x08005657
 8005638:	08005689 	.word	0x08005689
 800563c:	08005689 	.word	0x08005689
 8005640:	08005689 	.word	0x08005689
 8005644:	0800565f 	.word	0x0800565f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005648:	f7fe fa3c 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 800564c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800564e:	e021      	b.n	8005694 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005650:	4b0c      	ldr	r3, [pc, #48]	@ (8005684 <UART_SetConfig+0x2f8>)
 8005652:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005654:	e01e      	b.n	8005694 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005656:	f7fe f9c7 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800565a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800565c:	e01a      	b.n	8005694 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005662:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005664:	e016      	b.n	8005694 <UART_SetConfig+0x308>
 8005666:	bf00      	nop
 8005668:	cfff69f3 	.word	0xcfff69f3
 800566c:	40008000 	.word	0x40008000
 8005670:	40013800 	.word	0x40013800
 8005674:	40021000 	.word	0x40021000
 8005678:	40004400 	.word	0x40004400
 800567c:	40004800 	.word	0x40004800
 8005680:	40004c00 	.word	0x40004c00
 8005684:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005692:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 812a 	beq.w	80058f0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	4a9e      	ldr	r2, [pc, #632]	@ (800591c <UART_SetConfig+0x590>)
 80056a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	4413      	add	r3, r2
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d305      	bcc.n	80056cc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d903      	bls.n	80056d4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056d2:	e10d      	b.n	80058f0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	2200      	movs	r2, #0
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	60fa      	str	r2, [r7, #12]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e0:	4a8e      	ldr	r2, [pc, #568]	@ (800591c <UART_SetConfig+0x590>)
 80056e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2200      	movs	r2, #0
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056f6:	f7fa fd8f 	bl	8000218 <__aeabi_uldivmod>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4610      	mov	r0, r2
 8005700:	4619      	mov	r1, r3
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	020b      	lsls	r3, r1, #8
 800570c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005710:	0202      	lsls	r2, r0, #8
 8005712:	6979      	ldr	r1, [r7, #20]
 8005714:	6849      	ldr	r1, [r1, #4]
 8005716:	0849      	lsrs	r1, r1, #1
 8005718:	2000      	movs	r0, #0
 800571a:	460c      	mov	r4, r1
 800571c:	4605      	mov	r5, r0
 800571e:	eb12 0804 	adds.w	r8, r2, r4
 8005722:	eb43 0905 	adc.w	r9, r3, r5
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	469a      	mov	sl, r3
 800572e:	4693      	mov	fp, r2
 8005730:	4652      	mov	r2, sl
 8005732:	465b      	mov	r3, fp
 8005734:	4640      	mov	r0, r8
 8005736:	4649      	mov	r1, r9
 8005738:	f7fa fd6e 	bl	8000218 <__aeabi_uldivmod>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4613      	mov	r3, r2
 8005742:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800574a:	d308      	bcc.n	800575e <UART_SetConfig+0x3d2>
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005752:	d204      	bcs.n	800575e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a3a      	ldr	r2, [r7, #32]
 800575a:	60da      	str	r2, [r3, #12]
 800575c:	e0c8      	b.n	80058f0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005764:	e0c4      	b.n	80058f0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800576e:	d167      	bne.n	8005840 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005770:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005774:	2b08      	cmp	r3, #8
 8005776:	d828      	bhi.n	80057ca <UART_SetConfig+0x43e>
 8005778:	a201      	add	r2, pc, #4	@ (adr r2, 8005780 <UART_SetConfig+0x3f4>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057b5 	.word	0x080057b5
 800578c:	080057cb 	.word	0x080057cb
 8005790:	080057bb 	.word	0x080057bb
 8005794:	080057cb 	.word	0x080057cb
 8005798:	080057cb 	.word	0x080057cb
 800579c:	080057cb 	.word	0x080057cb
 80057a0:	080057c3 	.word	0x080057c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a4:	f7fe f98e 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 80057a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057aa:	e014      	b.n	80057d6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ac:	f7fe f9a0 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 80057b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057b2:	e010      	b.n	80057d6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005920 <UART_SetConfig+0x594>)
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057b8:	e00d      	b.n	80057d6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ba:	f7fe f915 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80057be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057c0:	e009      	b.n	80057d6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057c8:	e005      	b.n	80057d6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8089 	beq.w	80058f0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e2:	4a4e      	ldr	r2, [pc, #312]	@ (800591c <UART_SetConfig+0x590>)
 80057e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80057f0:	005a      	lsls	r2, r3, #1
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	441a      	add	r2, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	2b0f      	cmp	r3, #15
 8005808:	d916      	bls.n	8005838 <UART_SetConfig+0x4ac>
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005810:	d212      	bcs.n	8005838 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f023 030f 	bic.w	r3, r3, #15
 800581a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	b29b      	uxth	r3, r3
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	b29a      	uxth	r2, r3
 8005828:	8bfb      	ldrh	r3, [r7, #30]
 800582a:	4313      	orrs	r3, r2
 800582c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	8bfa      	ldrh	r2, [r7, #30]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	e05b      	b.n	80058f0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800583e:	e057      	b.n	80058f0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005840:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005844:	2b08      	cmp	r3, #8
 8005846:	d828      	bhi.n	800589a <UART_SetConfig+0x50e>
 8005848:	a201      	add	r2, pc, #4	@ (adr r2, 8005850 <UART_SetConfig+0x4c4>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005875 	.word	0x08005875
 8005854:	0800587d 	.word	0x0800587d
 8005858:	08005885 	.word	0x08005885
 800585c:	0800589b 	.word	0x0800589b
 8005860:	0800588b 	.word	0x0800588b
 8005864:	0800589b 	.word	0x0800589b
 8005868:	0800589b 	.word	0x0800589b
 800586c:	0800589b 	.word	0x0800589b
 8005870:	08005893 	.word	0x08005893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005874:	f7fe f926 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 8005878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800587a:	e014      	b.n	80058a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800587c:	f7fe f938 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 8005880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005882:	e010      	b.n	80058a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005884:	4b26      	ldr	r3, [pc, #152]	@ (8005920 <UART_SetConfig+0x594>)
 8005886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005888:	e00d      	b.n	80058a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800588a:	f7fe f8ad 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800588e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005890:	e009      	b.n	80058a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005896:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005898:	e005      	b.n	80058a6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058a4:	bf00      	nop
    }

    if (pclk != 0U)
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d021      	beq.n	80058f0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	4a1a      	ldr	r2, [pc, #104]	@ (800591c <UART_SetConfig+0x590>)
 80058b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058b6:	461a      	mov	r2, r3
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	441a      	add	r2, r3
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	d909      	bls.n	80058ea <UART_SetConfig+0x55e>
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058dc:	d205      	bcs.n	80058ea <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60da      	str	r2, [r3, #12]
 80058e8:	e002      	b.n	80058f0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2200      	movs	r2, #0
 8005904:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2200      	movs	r2, #0
 800590a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800590c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005910:	4618      	mov	r0, r3
 8005912:	3730      	adds	r7, #48	@ 0x30
 8005914:	46bd      	mov	sp, r7
 8005916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800591a:	bf00      	nop
 800591c:	08006064 	.word	0x08006064
 8005920:	00f42400 	.word	0x00f42400

08005924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01a      	beq.n	8005a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a22:	d10a      	bne.n	8005a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b098      	sub	sp, #96	@ 0x60
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a78:	f7fb fc7c 	bl	8001374 <HAL_GetTick>
 8005a7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d12f      	bne.n	8005aec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a94:	2200      	movs	r2, #0
 8005a96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f88e 	bl	8005bbc <UART_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d022      	beq.n	8005aec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ac6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e6      	bne.n	8005aa6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e063      	b.n	8005bb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d149      	bne.n	8005b8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005afa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b02:	2200      	movs	r2, #0
 8005b04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f857 	bl	8005bbc <UART_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d03c      	beq.n	8005b8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	623b      	str	r3, [r7, #32]
   return(result);
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b32:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e6      	bne.n	8005b14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f023 0301 	bic.w	r3, r3, #1
 8005b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3308      	adds	r3, #8
 8005b64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b66:	61fa      	str	r2, [r7, #28]
 8005b68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	69b9      	ldr	r1, [r7, #24]
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	617b      	str	r3, [r7, #20]
   return(result);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e5      	bne.n	8005b46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e012      	b.n	8005bb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3758      	adds	r7, #88	@ 0x58
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bcc:	e04f      	b.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d04b      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd6:	f7fb fbcd 	bl	8001374 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <UART_WaitOnFlagUntilTimeout+0x30>
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e04e      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d037      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b80      	cmp	r3, #128	@ 0x80
 8005c02:	d034      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b40      	cmp	r3, #64	@ 0x40
 8005c08:	d031      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d110      	bne.n	8005c3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f838 	bl	8005c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e029      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c48:	d111      	bne.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f81e 	bl	8005c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e00f      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	bf0c      	ite	eq
 8005c7e:	2301      	moveq	r3, #1
 8005c80:	2300      	movne	r3, #0
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d0a0      	beq.n	8005bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b095      	sub	sp, #84	@ 0x54
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e6      	bne.n	8005c9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e3      	bne.n	8005cd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d118      	bne.n	8005d42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f023 0310 	bic.w	r3, r3, #16
 8005d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6979      	ldr	r1, [r7, #20]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e6      	bne.n	8005d10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d56:	bf00      	nop
 8005d58:	3754      	adds	r7, #84	@ 0x54
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e027      	b.n	8005dc8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2224      	movs	r2, #36	@ 0x24
 8005d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005da6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e02d      	b.n	8005e48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2224      	movs	r2, #36	@ 0x24
 8005df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f84f 	bl	8005ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e02d      	b.n	8005ec4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2224      	movs	r2, #36	@ 0x24
 8005e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0201 	bic.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f811 	bl	8005ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d108      	bne.n	8005eee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005eec:	e031      	b.n	8005f52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005eee:	2308      	movs	r3, #8
 8005ef0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	0e5b      	lsrs	r3, r3, #25
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	0f5b      	lsrs	r3, r3, #29
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	7b3a      	ldrb	r2, [r7, #12]
 8005f1a:	4911      	ldr	r1, [pc, #68]	@ (8005f60 <UARTEx_SetNbDataToProcess+0x94>)
 8005f1c:	5c8a      	ldrb	r2, [r1, r2]
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f22:	7b3a      	ldrb	r2, [r7, #12]
 8005f24:	490f      	ldr	r1, [pc, #60]	@ (8005f64 <UARTEx_SetNbDataToProcess+0x98>)
 8005f26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f28:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	7b7a      	ldrb	r2, [r7, #13]
 8005f38:	4909      	ldr	r1, [pc, #36]	@ (8005f60 <UARTEx_SetNbDataToProcess+0x94>)
 8005f3a:	5c8a      	ldrb	r2, [r1, r2]
 8005f3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f40:	7b7a      	ldrb	r2, [r7, #13]
 8005f42:	4908      	ldr	r1, [pc, #32]	@ (8005f64 <UARTEx_SetNbDataToProcess+0x98>)
 8005f44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f46:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	0800607c 	.word	0x0800607c
 8005f64:	08006084 	.word	0x08006084

08005f68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f70:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005f74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	43db      	mvns	r3, r3
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	4013      	ands	r3, r2
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	1d3b      	adds	r3, r7, #4
 8005fa8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <memset>:
 8005fda:	4402      	add	r2, r0
 8005fdc:	4603      	mov	r3, r0
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d100      	bne.n	8005fe4 <memset+0xa>
 8005fe2:	4770      	bx	lr
 8005fe4:	f803 1b01 	strb.w	r1, [r3], #1
 8005fe8:	e7f9      	b.n	8005fde <memset+0x4>
	...

08005fec <__libc_init_array>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	4d0d      	ldr	r5, [pc, #52]	@ (8006024 <__libc_init_array+0x38>)
 8005ff0:	4c0d      	ldr	r4, [pc, #52]	@ (8006028 <__libc_init_array+0x3c>)
 8005ff2:	1b64      	subs	r4, r4, r5
 8005ff4:	10a4      	asrs	r4, r4, #2
 8005ff6:	2600      	movs	r6, #0
 8005ff8:	42a6      	cmp	r6, r4
 8005ffa:	d109      	bne.n	8006010 <__libc_init_array+0x24>
 8005ffc:	4d0b      	ldr	r5, [pc, #44]	@ (800602c <__libc_init_array+0x40>)
 8005ffe:	4c0c      	ldr	r4, [pc, #48]	@ (8006030 <__libc_init_array+0x44>)
 8006000:	f000 f818 	bl	8006034 <_init>
 8006004:	1b64      	subs	r4, r4, r5
 8006006:	10a4      	asrs	r4, r4, #2
 8006008:	2600      	movs	r6, #0
 800600a:	42a6      	cmp	r6, r4
 800600c:	d105      	bne.n	800601a <__libc_init_array+0x2e>
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	f855 3b04 	ldr.w	r3, [r5], #4
 8006014:	4798      	blx	r3
 8006016:	3601      	adds	r6, #1
 8006018:	e7ee      	b.n	8005ff8 <__libc_init_array+0xc>
 800601a:	f855 3b04 	ldr.w	r3, [r5], #4
 800601e:	4798      	blx	r3
 8006020:	3601      	adds	r6, #1
 8006022:	e7f2      	b.n	800600a <__libc_init_array+0x1e>
 8006024:	08006094 	.word	0x08006094
 8006028:	08006094 	.word	0x08006094
 800602c:	08006094 	.word	0x08006094
 8006030:	08006098 	.word	0x08006098

08006034 <_init>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	bf00      	nop
 8006038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603a:	bc08      	pop	{r3}
 800603c:	469e      	mov	lr, r3
 800603e:	4770      	bx	lr

08006040 <_fini>:
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	bf00      	nop
 8006044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006046:	bc08      	pop	{r3}
 8006048:	469e      	mov	lr, r3
 800604a:	4770      	bx	lr
